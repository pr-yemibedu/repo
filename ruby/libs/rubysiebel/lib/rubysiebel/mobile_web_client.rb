require 'utility_pack'

module RubySiebel

  module MobileWebClient80Configuration
    SIEBEL_INSTALL_DRIVE = "C:"
    SIEBEL_INSTALL_ROOT = "#{SIEBEL_INSTALL_DRIVE}\\program files\\siebel\\8.0\\web client"
    
    SIEBEL_BIN_DIRECTORY_PATH = "#{SIEBEL_INSTALL_ROOT}\\bin\\enu"
    SIEBEL_EPHARMA_CONFIGURATION_FILE_PATH = "#{SIEBEL_BIN_DIRECTORY_PATH}\\epharma.cfg"
    
    SIEBEL_DB_DIRECTORY_PATH = "#{SIEBEL_INSTALL_ROOT}\\local"
    SIEBEL_DB_FILE_NAME = "sse_data.dbf"
    SIEBEL_DB_FILE_PATH = "#{SIEBEL_DB_DIRECTORY_PATH}\\#{SIEBEL_DB_FILE_NAME}"
    
    SIEBEL_DICTIONARY_DATA_CACHE_DIRECTORY_PATH = SIEBEL_DB_DIRECTORY_PATH
    SIEBEL_DICTIONARY_DATA_CACHE_FILE_NAME = "dicdata.dat"
    SIEBEL_DICTIONARY_DATA_CACHE_FILE_PATH = "#{SIEBEL_DICTIONARY_DATA_CACHE_DIRECTORY_PATH}\\#{SIEBEL_DICTIONARY_DATA_CACHE_FILE_NAME}"
    
    SIEBEL_SRF_DIRECTORY_PATH = "#{SIEBEL_INSTALL_ROOT}\\OBJECTS\\ENU"
    SIEBEL_SRF_FILE_NAME = "siebel_sia.srf"
    SIEBEL_SRF_FILE_PATH = "#{SIEBEL_SRF_DIRECTORY_PATH}\\#{SIEBEL_SRF_FILE_NAME}"
    
    SIEBEL_PUBLIC_WWW_DIRECTORY_PATH = "#{SIEBEL_INSTALL_ROOT}\\PUBLIC\\enu"
    
    SIEBEL_WEB_TEMPLATE_DIRECTORY_PATH = "#{SIEBEL_INSTALL_ROOT}\\WEBTEMPL"
    
    SIEBEL_BACKUP_PATHS = [SIEBEL_DB_FILE_PATH, SIEBEL_DICTIONARY_DATA_CACHE_FILE_PATH, SIEBEL_SRF_FILE_PATH, SIEBEL_EPHARMA_CONFIGURATION_FILE_PATH, SIEBEL_PUBLIC_WWW_DIRECTORY_PATH, SIEBEL_WEB_TEMPLATE_DIRECTORY_PATH]
    
    CLIENT_PROCESS_IMAGE_NAMES = %w( siebel.exe siebel1.exe )
    SYNC_CLIENT_PROCESS_IMAGE_NAMES = %w( autosync.exe )
    DB_ENGINE_PROCESS_IMAGE_NAMES = %w( dbeng9.exe )
    ALL_PROCESS_IMAGE_NAMES = CLIENT_PROCESS_IMAGE_NAMES + SYNC_CLIENT_PROCESS_IMAGE_NAMES + DB_ENGINE_PROCESS_IMAGE_NAMES
  end

  module MobileWebClient
    include UtilityPack::Win32
    include MobileWebClient80Configuration
    
    def self.kill
      ProcessHelpers.kill ALL_PROCESS_IMAGE_NAMES
    end
    
    def self.database_exists?
      File.exists? SIEBEL_DB_FILE_PATH
    end
    
    def self.srf_exists?
      File.exists? SIEBEL_SRF_FILE_PATH
    end
    
    def self.backup path
      UtilityPack::Rar.sfx path, SIEBEL_BACKUP_PATHS
    end
    
  end

end
