
#if !defined(AFX_CEFUN_H__BAE08A89_0375_11D3_B4B2_00008612908A__INCLUDED_)
#define AFX_CEFUN_H__BAE08A89_0375_11D3_B4B2_00008612908A__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include "resource.h"

// Other libraries to add in (different names in emulation!):
// 0) Done - coredll.dll
// 1) Done - commctrl.dll
// 2) Done - commdlg.dll (commdlgm.dll)
// 3) Done - ole32.dll
// 4) Done - oleaut32.dll
// 5) Done - secur32.dll
// 6) Done - toolhelp.dll
// 7) Done - wininet.dll
// 8) Done - winsock.dll
// 9) Is there an ADO library?!?
// 10) What is RSABASE.DLL -- a Cryptography DLL of some sort?!?
// 11) No - schannel.dll - NT's security API library (matches to CE's SECUR32.DLL)
// 12) Done - ceshell.dll
// 13) Future - mfcce20.dll
// 14) Done - addrstor.dll
// 15) Done - htmlview.dll
// 16) Done - msgstore.dll
// 17) Done - richink.dll
// 18) Future - ADO? (adoce.dll, adocedb.dll, adoceres.dll, adosync.dll)
// 19) aygshell.dll


// Possible features to add:
// 1) Show that a feature is supported by presence of supporting EXEs/DLLs
//    -- VB, Javscript, JVM, PIE, IE4CE, HTML View, WebView
//    -- ADO support (ADO*.DLL)
// 2) Done - Dump results to object store
// 3) Sort items by component
// 4) WHAT IS THE PRIMARY GOAL OF THIS TOOL?!?
// 5) Add search for window classes.
// 6) Add search for COM classes
// 7) Add ability to filter out undocumented functions
// 8) Add ability to run on systems without a UI (just dump file).

// Issues to resolve
// 1) Where the heck are the Crypt functions?!?
// 2) Can we make this into an extensible architecture?
// 3) Can we provide a way to store the data in a database for comparison sake?
//    -- Dump into Access database
//    -- Compare one device to another
// 4) How to sort out exported functions from public, documented functions?!?

//-----------------------------------------------------------------------------
// Declaration of function and library list structures.
//-----------------------------------------------------------------------------
typedef struct tagFUNCLIST
{
    TCHAR * pFunc;     // Function name.
    BOOL  bPresent;    // Whether present.
} FUNCLIST, * PFUNLIST;

typedef struct tagLIBLIST
{
    TCHAR * pName;       // Library name.
    FUNCLIST * pfl;      // Pointer to array of functions.
    LONG       cFunc;    // Count of functions in library.
    BOOL       bPresent; // Whether library exists in system
} LIBLIST, * PLIBLIST;


#if defined(ASSERT)
#undef ASSERT
#endif
#define ASSERT(exp) if (!(exp)) { TCHAR tch[80]; \
        wsprintf(tch, TEXT("Assertion Failure in %s at line %d"), __FILE__, __LINE__); \
        MessageBox(NULL, tch, TEXT("Assertion"), MB_OK); }

//-----------------------------------------------------------------------------
// The data. Library names and function names for Windows CE 2.12.
// This was compiled from a MAXALL build of the beta CE 2.12 Platform Builder.
//-----------------------------------------------------------------------------
FUNCLIST aflCoreDll[] =
{
    TEXT("AbortDoc"), FALSE,
    TEXT("ActivateDevice"), FALSE,
    TEXT("AddEventAccess"), FALSE,
    TEXT("AddFontResourceW"), FALSE,
    TEXT("AddTrackedItem"), FALSE,
    TEXT("AdjustWindowRectEx"), FALSE,
    TEXT("AppendMenuW"), FALSE,
    TEXT("AttachDebugger"), FALSE,
    TEXT("AudioUpdateFromRegistry"), FALSE,
    TEXT("BatteryDrvrGetLevels"), FALSE,
    TEXT("BatteryDrvrSupportsChangeNotification"), FALSE,
    TEXT("BatteryGetLifeTimeInfo"), FALSE,
    TEXT("BatteryNotifyOfTimeChange"), FALSE,
    TEXT("BeginDeferWindowPos"), FALSE,
    TEXT("BeginPaint"), FALSE,
    TEXT("BinaryCompress"), FALSE,
    TEXT("BinaryDecompress"), FALSE,
    TEXT("BitBlt"), FALSE,
    TEXT("BringWindowToTop"), FALSE,
    TEXT("CacheSync"), FALSE,
    TEXT("CallNextHookEx"), FALSE,
    TEXT("CallWindowProcW"), FALSE,
    TEXT("CeChangeDatabaseLCID"), FALSE,
    TEXT("CeClearReplChangeBitsEx"), FALSE,
    TEXT("CeClearUserNotification"), FALSE,
    TEXT("CeCreateDatabase"), FALSE,
    TEXT("CeCreateDatabaseEx"), FALSE,
    TEXT("CeDeleteDatabase"), FALSE,
    TEXT("CeDeleteDatabaseEx"), FALSE,
    TEXT("CeDeleteRecord"), FALSE,
    TEXT("CeEnumDBVolumes"), FALSE,
    TEXT("CeEventHasOccurred"), FALSE,
    TEXT("CeFindFirstDatabase"), FALSE,
    TEXT("CeFindFirstDatabaseEx"), FALSE,
    TEXT("CeFindNextDatabase"), FALSE,
    TEXT("CeFindNextDatabaseEx"), FALSE,
    TEXT("CeFlushDBVol"), FALSE,
    TEXT("CeFreeNotification"), FALSE,
    TEXT("CeGetReplChangeBitsEx"), FALSE,
    TEXT("CeGetReplChangeMask"), FALSE,
    TEXT("CeGetReplOtherBitsEx"), FALSE,
    TEXT("CeGetUserNotification"), FALSE,
    TEXT("CeGetUserNotificationHandles"), FALSE,
    TEXT("CeGetUserNotificationPreferences"), FALSE,
    TEXT("CeHandleAppNotifications"), FALSE,
    TEXT("CeMountDBVol"), FALSE,
    TEXT("CeOidGetInfo"), FALSE,
    TEXT("CeOidGetInfoEx"), FALSE,
    TEXT("CeOpenDatabase"), FALSE,
    TEXT("CeOpenDatabaseEx"), FALSE,
    TEXT("CeReadRecordProps"), FALSE,
    TEXT("CeReadRecordPropsEx"), FALSE,
    TEXT("CeRegisterFileSystemNotification"), FALSE,
    TEXT("CeRegisterReplNotification"), FALSE,
    TEXT("CeRemoveFontResource"), FALSE,
    TEXT("CeRunAppAtEvent"), FALSE,
    TEXT("CeRunAppAtTime"), FALSE,
    TEXT("CeSeekDatabase"), FALSE,
    TEXT("CeSetDatabaseInfo"), FALSE,
    TEXT("CeSetDatabaseInfoEx"), FALSE,
    TEXT("CeSetReplChangeBitsEx"), FALSE,
    TEXT("CeSetReplChangeMask"), FALSE,
    TEXT("CeSetReplOtherBitsEx"), FALSE,
    TEXT("CeSetUserNotification"), FALSE,
    TEXT("CeSetUserNotificationEx"), FALSE,
    TEXT("CeUnmountDBVol"), FALSE,
    TEXT("CeWriteRecordProps"), FALSE,
    TEXT("CharLowerBuffW"), FALSE,
    TEXT("CharLowerW"), FALSE,
    TEXT("CharNextW"), FALSE,
    TEXT("CharPrevW"), FALSE,
    TEXT("CharUpperBuffW"), FALSE,
    TEXT("CharUpperW"), FALSE,
    TEXT("CheckMenuItem"), FALSE,
    TEXT("CheckMenuRadioItem"), FALSE,
    TEXT("CheckPassword"), FALSE,
    TEXT("CheckRadioButton"), FALSE,
    TEXT("ChildWindowFromPoint"), FALSE,
    TEXT("ClearCommBreak"), FALSE,
    TEXT("ClearCommError"), FALSE,
    TEXT("ClientToScreen"), FALSE,
    TEXT("ClipCursor"), FALSE,
    TEXT("CloseAllDeviceHandles"), FALSE,
    TEXT("CloseAllFileHandles"), FALSE,
    TEXT("CloseClipboard"), FALSE,
    TEXT("CloseEnhMetaFile"), FALSE,
    TEXT("CloseHandle"), FALSE,
    TEXT("CloseProcOE"), FALSE,
    TEXT("CombineRgn"), FALSE,
    TEXT("CompactAllHeaps"), FALSE,
    TEXT("CompareFileTime"), FALSE,
    TEXT("CompareStringW"), FALSE,
    TEXT("ConnectDebugger"), FALSE,
    TEXT("ContinueDebugEvent"), FALSE,
    TEXT("ConvertDefaultLocale"), FALSE,
    TEXT("CopyFileW"), FALSE,
    TEXT("CopyRect"), FALSE,
    TEXT("CountClipboardFormats"), FALSE,
    TEXT("CreateAPIHandle"), FALSE,
    TEXT("CreateAPISet"), FALSE,
    TEXT("CreateAcceleratorTableW"), FALSE,
    TEXT("CreateBitmap"), FALSE,
    TEXT("CreateBitmapFromPointer"), FALSE,
    TEXT("CreateCaret"), FALSE,
    TEXT("CreateCompatibleBitmap"), FALSE,
    TEXT("CreateCompatibleDC"), FALSE,
    TEXT("CreateCrit"), FALSE,
    TEXT("CreateCursor"), FALSE,
    TEXT("CreateDCW"), FALSE,
    TEXT("CreateDIBPatternBrushPt"), FALSE,
    TEXT("CreateDIBSection"), FALSE,
    TEXT("CreateDeviceHandle"), FALSE,
    TEXT("CreateDialogIndirectParamW"), FALSE,
    TEXT("CreateDirectoryW"), FALSE,
    TEXT("CreateEnhMetaFileW"), FALSE,
    TEXT("CreateEventW"), FALSE,
    TEXT("CreateFileForMapping"), FALSE,
    TEXT("CreateFileForMappingW"), FALSE,
    TEXT("CreateFileMappingW"), FALSE,
    TEXT("CreateFileW"), FALSE,
    TEXT("CreateFontIndirectW"), FALSE,
    TEXT("CreateIconIndirect"), FALSE,
    TEXT("CreateMenu"), FALSE,
    TEXT("CreateMutexW"), FALSE,
    TEXT("CreatePalette"), FALSE,
    TEXT("CreatePatternBrush"), FALSE,
    TEXT("CreatePen"), FALSE,
    TEXT("CreatePenIndirect"), FALSE,
    TEXT("CreatePopupMenu"), FALSE,
    TEXT("CreateProcessW"), FALSE,
    TEXT("CreateRectRgn"), FALSE,
    TEXT("CreateRectRgnIndirect"), FALSE,
    TEXT("CreateSolidBrush"), FALSE,
    TEXT("CreateThread"), FALSE,
    TEXT("CreateWindowExW"), FALSE,
    TEXT("CryptAcquireContextW"), FALSE,
    TEXT("CryptContextAddRef"), FALSE,
    TEXT("CryptCreateHash"), FALSE,
    TEXT("CryptDecrypt"), FALSE,
    TEXT("CryptDeriveKey"), FALSE,
    TEXT("CryptDestroyHash"), FALSE,
    TEXT("CryptDestroyKey"), FALSE,
    TEXT("CryptDuplicateHash"), FALSE,
    TEXT("CryptDuplicateKey"), FALSE,
    TEXT("CryptEncrypt"), FALSE,
    TEXT("CryptEnumProviderTypesW"), FALSE,
    TEXT("CryptEnumProvidersW"), FALSE,
    TEXT("CryptExportKey"), FALSE,
    TEXT("CryptGenKey"), FALSE,
    TEXT("CryptGenRandom"), FALSE,
    TEXT("CryptGetDefaultProviderW"), FALSE,
    TEXT("CryptGetHashParam"), FALSE,
    TEXT("CryptGetKeyParam"), FALSE,
    TEXT("CryptGetProvParam"), FALSE,
    TEXT("CryptGetUserKey"), FALSE,
    TEXT("CryptHashData"), FALSE,
    TEXT("CryptHashSessionKey"), FALSE,
    TEXT("CryptImportKey"), FALSE,
    TEXT("CryptReleaseContext"), FALSE,
    TEXT("CryptSetHashParam"), FALSE,
    TEXT("CryptSetKeyParam"), FALSE,
    TEXT("CryptSetProvParam"), FALSE,
    TEXT("CryptSetProviderExW"), FALSE,
    TEXT("CryptSetProviderW"), FALSE,
    TEXT("CryptSignHashW"), FALSE,
    TEXT("CryptVerifySignatureW"), FALSE,
    TEXT("DBCanonicalize"), FALSE,
    TEXT("DeactivateDevice"), FALSE,
    TEXT("DebugActiveProcess"), FALSE,
    TEXT("DebugNotify"), FALSE,
    TEXT("DefDlgProcW"), FALSE,
    TEXT("DefWindowProcW"), FALSE,
    TEXT("DefaultImcGet"), FALSE,
    TEXT("DefaultImeWndGet"), FALSE,
    TEXT("DeferWindowPos"), FALSE,
    TEXT("DeleteAndRenameFile"), FALSE,
    TEXT("DeleteCriticalSection"), FALSE,
    TEXT("DeleteDC"), FALSE,
    TEXT("DeleteEnhMetaFile"), FALSE,
    TEXT("DeleteFileW"), FALSE,
    TEXT("DeleteMenu"), FALSE,
    TEXT("DeleteObject"), FALSE,
    TEXT("DeleteTrackedItem"), FALSE,
    TEXT("DeregisterAFS"), FALSE,
    TEXT("DeregisterAFSName"), FALSE,
    TEXT("DeregisterDevice"), FALSE,
    TEXT("DestroyAcceleratorTable"), FALSE,
    TEXT("DestroyCaret"), FALSE,
    TEXT("DestroyCursor"), FALSE,
    TEXT("DestroyIcon"), FALSE,
    TEXT("DestroyMenu"), FALSE,
    TEXT("DestroyWindow"), FALSE,
    TEXT("DeviceIoControl"), FALSE,
    TEXT("DialogBoxIndirectParamW"), FALSE,
    TEXT("DisableCaretSystemWide"), FALSE,
    TEXT("DispatchMessageW"), FALSE,
    TEXT("DrawEdge"), FALSE,
    TEXT("DrawFocusRect"), FALSE,
    TEXT("DrawFrameControl"), FALSE,
    TEXT("DrawIconEx"), FALSE,
    TEXT("DrawMenuBar"), FALSE,
    TEXT("DrawTextW"), FALSE,
    TEXT("DumpFileSystemHeap"), FALSE,
    TEXT("DumpKCallProfile"), FALSE,
    TEXT("Ellipse"), FALSE,
    TEXT("EmptyClipboard"), FALSE,
    TEXT("EnableCaretSystemWide"), FALSE,
    TEXT("EnableEUDC"), FALSE,
    TEXT("EnableHardwareKeyboard"), FALSE,
    TEXT("EnableMenuItem"), FALSE,
    TEXT("EnableWindow"), FALSE,
    TEXT("EndDeferWindowPos"), FALSE,
    TEXT("EndDialog"), FALSE,
    TEXT("EndDoc"), FALSE,
    TEXT("EndPage"), FALSE,
    TEXT("EndPaint"), FALSE,
    TEXT("EnterCriticalSection"), FALSE,
    TEXT("EnumCalendarInfoW"), FALSE,
    TEXT("EnumClipboardFormats"), FALSE,
    TEXT("EnumDateFormatsW"), FALSE,
    TEXT("EnumDevices"), FALSE,
    TEXT("EnumFontFamiliesW"), FALSE,
    TEXT("EnumFontsW"), FALSE,
    TEXT("EnumPnpIds"), FALSE,
    TEXT("EnumSystemCodePagesW"), FALSE,
    TEXT("EnumSystemLocalesW"), FALSE,
    TEXT("EnumTimeFormatsW"), FALSE,
    TEXT("EnumWindows"), FALSE,
    TEXT("EqualRect"), FALSE,
    TEXT("EqualRgn"), FALSE,
    TEXT("EscapeCommFunction"), FALSE,
    TEXT("EventModify"), FALSE,
    TEXT("ExcludeClipRect"), FALSE,
    TEXT("ExitThread"), FALSE,
    TEXT("ExtEscape"), FALSE,
    TEXT("ExtTextOutW"), FALSE,
    TEXT("ExtractIconExW"), FALSE,
    TEXT("ExtractResource"), FALSE,
    TEXT("FileSystemPowerFunction"), FALSE,
    TEXT("FileTimeToLocalFileTime"), FALSE,
    TEXT("FileTimeToSystemTime"), FALSE,
    TEXT("FillRect"), FALSE,
    TEXT("FillRgn"), FALSE,
    TEXT("FilterTrackedItem"), FALSE,
    TEXT("FindClose"), FALSE,
    TEXT("FindFirstFileW"), FALSE,
    TEXT("FindNextFileW"), FALSE,
    TEXT("FindResource"), FALSE,
    TEXT("FindResourceW"), FALSE,
    TEXT("FindWindowW"), FALSE,
    TEXT("FlushFileBuffers"), FALSE,
    TEXT("FlushInstructionCache"), FALSE,
    TEXT("FlushViewOfFile"), FALSE,
    TEXT("FlushViewOfFileMaybe"), FALSE,
    TEXT("FoldStringW"), FALSE,
    TEXT("ForcePageout"), FALSE,
    TEXT("FormatMessageW"), FALSE,
    TEXT("FreeLibrary"), FALSE,
    TEXT("FreeLibraryAndExitThread"), FALSE,
    TEXT("GetACP"), FALSE,
    TEXT("GetAPIAddress"), FALSE,
    TEXT("GetActiveWindow"), FALSE,
    TEXT("GetAssociatedMenu"), FALSE,
    TEXT("GetAsyncKeyState"), FALSE,
    TEXT("GetAsyncShiftFlags"), FALSE,
    TEXT("GetBkColor"), FALSE,
    TEXT("GetBkMode"), FALSE,
    TEXT("GetCPInfo"), FALSE,
    TEXT("GetCRTFlags"), FALSE,
    TEXT("GetCRTStorageEx"), FALSE,
    TEXT("GetCallerProcess"), FALSE,
    TEXT("GetCallerProcessIndex"), FALSE,
    TEXT("GetCapture"), FALSE,
    TEXT("GetCaretBlinkTime"), FALSE,
    TEXT("GetCaretPos"), FALSE,
    TEXT("GetClassInfoW"), FALSE,
    TEXT("GetClassLong"), FALSE,
    TEXT("GetClassLongW"), FALSE,
    TEXT("GetClassNameW"), FALSE,
    TEXT("GetClientRect"), FALSE,
    TEXT("GetClipBox"), FALSE,
    TEXT("GetClipCursor"), FALSE,
    TEXT("GetClipRgn"), FALSE,
    TEXT("GetClipboardData"), FALSE,
    TEXT("GetClipboardDataAlloc"), FALSE,
    TEXT("GetClipboardFormatNameW"), FALSE,
    TEXT("GetClipboardOwner"), FALSE,
    TEXT("GetCommMask"), FALSE,
    TEXT("GetCommModemStatus"), FALSE,
    TEXT("GetCommProperties"), FALSE,
    TEXT("GetCommState"), FALSE,
    TEXT("GetCommTimeouts"), FALSE,
    TEXT("GetCurrencyFormatW"), FALSE,
    TEXT("GetCurrentFT"), FALSE,
    TEXT("GetCurrentObject"), FALSE,
    TEXT("GetCurrentPermissions"), FALSE,
    TEXT("GetCursor"), FALSE,
    TEXT("GetCursorPos"), FALSE,
    TEXT("GetDC"), FALSE,
    TEXT("GetDCEx"), FALSE,
    TEXT("GetDDrawCallbacks"), FALSE,
    TEXT("GetDateFormatW"), FALSE,
    TEXT("GetDesktopWindow"), FALSE,
    TEXT("GetDeviceCaps"), FALSE,
    TEXT("GetDeviceKeys"), FALSE,
    TEXT("GetDialogBaseUnits"), FALSE,
    TEXT("GetDiskFreeSpaceExW"), FALSE,
    TEXT("GetDlgCtrlID"), FALSE,
    TEXT("GetDlgItem"), FALSE,
    TEXT("GetDlgItemInt"), FALSE,
    TEXT("GetDlgItemTextW"), FALSE,
    TEXT("GetDoubleClickTime"), FALSE,
    TEXT("GetExitCodeProcess"), FALSE,
    TEXT("GetExitCodeThread"), FALSE,
    TEXT("GetFSHeapInfo"), FALSE,
    TEXT("GetFileAttributesW"), FALSE,
    TEXT("GetFileInformationByHandle"), FALSE,
    TEXT("GetFileSize"), FALSE,
    TEXT("GetFileTime"), FALSE,
    TEXT("GetFocus"), FALSE,
    TEXT("GetForegroundInfo"), FALSE,
    TEXT("GetForegroundKeyboardTarget"), FALSE,
    TEXT("GetForegroundWindow"), FALSE,
    TEXT("GetHeapSnapshot"), FALSE,
    TEXT("GetIdleTime"), FALSE,
    TEXT("GetKPhys"), FALSE,
    TEXT("GetKeyState"), FALSE,
    TEXT("GetKeyboardLayout"), FALSE,
    TEXT("GetKeyboardLayoutNameW"), FALSE,
    TEXT("GetKeyboardStatus"), FALSE,
    TEXT("GetKeyboardTarget"), FALSE,
    TEXT("GetLastError"), FALSE,
    TEXT("GetLocalTime"), FALSE,
    TEXT("GetLocaleInfoW"), FALSE,
    TEXT("GetMenuItemInfoW"), FALSE,
    TEXT("GetMessagePos"), FALSE,
    TEXT("GetMessageSource"), FALSE,
    TEXT("GetMessageW"), FALSE,
    TEXT("GetMessageWNoWait"), FALSE,
    TEXT("GetModuleFileNameW"), FALSE,
    TEXT("GetModuleHandleW"), FALSE,
    TEXT("GetMouseMovePoints"), FALSE,
    TEXT("GetNearestColor"), FALSE,
    TEXT("GetNearestPaletteIndex"), FALSE,
    TEXT("GetNextDlgGroupItem"), FALSE,
    TEXT("GetNextDlgTabItem"), FALSE,
    TEXT("GetNumberFormatW"), FALSE,
    TEXT("GetOEMCP"), FALSE,
    TEXT("GetObjectType"), FALSE,
    TEXT("GetObjectW"), FALSE,
    TEXT("GetOpenClipboardWindow"), FALSE,
    TEXT("GetOpenFileNameW"), FALSE,
    TEXT("GetOverlappedResult"), FALSE,
    TEXT("GetOwnerProcess"), FALSE,
    TEXT("GetPaletteEntries"), FALSE,
    TEXT("GetParent"), FALSE,
    TEXT("GetPasswordActive"), FALSE,
    TEXT("GetPixel"), FALSE,
    TEXT("GetPriorityClipboardFormat"), FALSE,
    TEXT("GetProcAddrBits"), FALSE,
    TEXT("GetProcAddressW"), FALSE,
    TEXT("GetProcFromPtr"), FALSE,
    TEXT("GetProcName"), FALSE,
    TEXT("GetProcessHeap"), FALSE,
    TEXT("GetProcessIndexFromID"), FALSE,
    TEXT("GetProcessVersion"), FALSE,
    TEXT("GetRealTime"), FALSE,
    TEXT("GetRegionData"), FALSE,
    TEXT("GetRgnBox"), FALSE,
    TEXT("GetRomFileBytes"), FALSE,
    TEXT("GetRomFileInfo"), FALSE,
    TEXT("GetSaveFileNameW"), FALSE,
    TEXT("GetScrollInfo"), FALSE,
    TEXT("GetStdioPathW"), FALSE,
    TEXT("GetStockObject"), FALSE,
    TEXT("GetStoreInformation"), FALSE,
    TEXT("GetStringTypeExW"), FALSE,
    TEXT("GetStringTypeW"), FALSE,
    TEXT("GetSubMenu"), FALSE,
    TEXT("GetSysColor"), FALSE,
    TEXT("GetSysColorBrush"), FALSE,
    TEXT("GetSystemDefaultLCID"), FALSE,
    TEXT("GetSystemDefaultLangID"), FALSE,
    TEXT("GetSystemInfo"), FALSE,
    TEXT("GetSystemMemoryDivision"), FALSE,
    TEXT("GetSystemMetrics"), FALSE,
    TEXT("GetSystemPaletteEntries"), FALSE,
    TEXT("GetSystemPowerStatusEx"), FALSE,
    TEXT("GetSystemPowerStatusEx2"), FALSE,
    TEXT("GetSystemTime"), FALSE,
    TEXT("GetTempPathW"), FALSE,
    TEXT("GetTextColor"), FALSE,
    TEXT("GetTextExtentExPointW"), FALSE,
    TEXT("GetTextFaceW"), FALSE,
    TEXT("GetTextMetricsW"), FALSE,
    TEXT("GetThreadContext"), FALSE,
    TEXT("GetThreadPriority"), FALSE,
    TEXT("GetThreadTimes"), FALSE,
    TEXT("GetTickCount"), FALSE,
    TEXT("GetTimeFormatW"), FALSE,
    TEXT("GetTimeZoneInformation"), FALSE,
    TEXT("GetUpdateRect"), FALSE,
    TEXT("GetUpdateRgn"), FALSE,
    TEXT("GetUserDefaultLCID"), FALSE,
    TEXT("GetUserDefaultLangID"), FALSE,
    TEXT("GetVersionEx"), FALSE,
    TEXT("GetVersionExW"), FALSE,
    TEXT("GetWindow"), FALSE,
    TEXT("GetWindowDC"), FALSE,
    TEXT("GetWindowLongW"), FALSE,
    TEXT("GetWindowRect"), FALSE,
    TEXT("GetWindowRgn"), FALSE,
    TEXT("GetWindowTextLengthW"), FALSE,
    TEXT("GetWindowTextW"), FALSE,
    TEXT("GetWindowThreadProcessId"), FALSE,
    TEXT("GiveKPhys"), FALSE,
    TEXT("GlobalMemoryStatus"), FALSE,
    TEXT("GwesPowerOffSystem"), FALSE,
    TEXT("HeapAlloc"), FALSE,
    TEXT("HeapCreate"), FALSE,
    TEXT("HeapDestroy"), FALSE,
    TEXT("HeapFree"), FALSE,
    TEXT("HeapReAlloc"), FALSE,
    TEXT("HeapSize"), FALSE,
    TEXT("HeapValidate"), FALSE,
    TEXT("HideCaret"), FALSE,
    TEXT("ImageList_Add"), FALSE,
    TEXT("ImageList_AddMasked"), FALSE,
    TEXT("ImageList_BeginDrag"), FALSE,
    TEXT("ImageList_Copy"), FALSE,
    TEXT("ImageList_CopyDitherImage"), FALSE,
    TEXT("ImageList_Create"), FALSE,
    TEXT("ImageList_Destroy"), FALSE,
    TEXT("ImageList_DragEnter"), FALSE,
    TEXT("ImageList_DragLeave"), FALSE,
    TEXT("ImageList_DragMove"), FALSE,
    TEXT("ImageList_DragShowNolock"), FALSE,
    TEXT("ImageList_Draw"), FALSE,
    TEXT("ImageList_DrawEx"), FALSE,
    TEXT("ImageList_DrawIndirect"), FALSE,
    TEXT("ImageList_Duplicate"), FALSE,
    TEXT("ImageList_EndDrag"), FALSE,
    TEXT("ImageList_GetBkColor"), FALSE,
    TEXT("ImageList_GetDragImage"), FALSE,
    TEXT("ImageList_GetIcon"), FALSE,
    TEXT("ImageList_GetIconSize"), FALSE,
    TEXT("ImageList_GetImageCount"), FALSE,
    TEXT("ImageList_GetImageInfo"), FALSE,
    TEXT("ImageList_LoadImage"), FALSE,
    TEXT("ImageList_Merge"), FALSE,
    TEXT("ImageList_Remove"), FALSE,
    TEXT("ImageList_Replace"), FALSE,
    TEXT("ImageList_ReplaceIcon"), FALSE,
    TEXT("ImageList_SetBkColor"), FALSE,
    TEXT("ImageList_SetDragCursorImage"), FALSE,
    TEXT("ImageList_SetIconSize"), FALSE,
    TEXT("ImageList_SetImageCount"), FALSE,
    TEXT("ImageList_SetOverlayImage"), FALSE,
    TEXT("ImmAssociateContext"), FALSE,
    TEXT("ImmAssociateContextEx"), FALSE,
    TEXT("ImmConfigureIMEW"), FALSE,
    TEXT("ImmCreateContext"), FALSE,
    TEXT("ImmCreateIMCC"), FALSE,
    TEXT("ImmDestroyContext"), FALSE,
    TEXT("ImmDestroyIMCC"), FALSE,
    TEXT("ImmDisableIME"), FALSE,
    TEXT("ImmEnumRegisterWordW"), FALSE,
    TEXT("ImmEscapeW"), FALSE,
    TEXT("ImmGenerateMessage"), FALSE,
    TEXT("ImmGetCandidateListCountW"), FALSE,
    TEXT("ImmGetCandidateListW"), FALSE,
    TEXT("ImmGetCandidateWindow"), FALSE,
    TEXT("ImmGetCompositionFontW"), FALSE,
    TEXT("ImmGetCompositionStringW"), FALSE,
    TEXT("ImmGetCompositionWindow"), FALSE,
    TEXT("ImmGetContext"), FALSE,
    TEXT("ImmGetConversionListW"), FALSE,
    TEXT("ImmGetConversionStatus"), FALSE,
    TEXT("ImmGetDefaultIMEWnd"), FALSE,
    TEXT("ImmGetDescriptionW"), FALSE,
    TEXT("ImmGetGuideLineW"), FALSE,
    TEXT("ImmGetHotKey"), FALSE,
    TEXT("ImmGetIMCCLockCount"), FALSE,
    TEXT("ImmGetIMCCSize"), FALSE,
    TEXT("ImmGetIMCLockCount"), FALSE,
    TEXT("ImmGetIMEFileNameW"), FALSE,
    TEXT("ImmGetImeMenuItemsW"), FALSE,
    TEXT("ImmGetOpenStatus"), FALSE,
    TEXT("ImmGetProperty"), FALSE,
    TEXT("ImmGetRegisterWordStyleW"), FALSE,
    TEXT("ImmGetStatusWindowPos"), FALSE,
    TEXT("ImmGetUIClassName"), FALSE,
    TEXT("ImmGetVirtualKey"), FALSE,
    TEXT("ImmIsIME"), FALSE,
    TEXT("ImmIsUIMessageW"), FALSE,
    TEXT("ImmLockIMC"), FALSE,
    TEXT("ImmLockIMCC"), FALSE,
    TEXT("ImmNotifyIME"), FALSE,
    TEXT("ImmProcessKey"), FALSE,
    TEXT("ImmReSizeIMCC"), FALSE,
    TEXT("ImmRegisterWordW"), FALSE,
    TEXT("ImmReleaseContext"), FALSE,
    TEXT("ImmRequestMessageW"), FALSE,
    TEXT("ImmSIPanelState"), FALSE,
    TEXT("ImmSetActiveContext"), FALSE,
    TEXT("ImmSetCandidateWindow"), FALSE,
    TEXT("ImmSetCompositionFontW"), FALSE,
    TEXT("ImmSetCompositionStringW"), FALSE,
    TEXT("ImmSetCompositionWindow"), FALSE,
    TEXT("ImmSetConversionStatus"), FALSE,
    TEXT("ImmSetHotKey"), FALSE,
    TEXT("ImmSetImeWndIMC"), FALSE,
    TEXT("ImmSetOpenStatus"), FALSE,
    TEXT("ImmSetStatusWindowPos"), FALSE,
    TEXT("ImmSimulateHotKey"), FALSE,
    TEXT("ImmTranslateMessage"), FALSE,
    TEXT("ImmUnlockIMC"), FALSE,
    TEXT("ImmUnlockIMCC"), FALSE,
    TEXT("ImmUnregisterWordW"), FALSE,
    TEXT("InflateRect"), FALSE,
    TEXT("InitLocale"), FALSE,
    TEXT("InitializeCriticalSection"), FALSE,
    TEXT("InputDebugCharW"), FALSE,
    TEXT("InsertMenuW"), FALSE,
    TEXT("InterruptDisable"), FALSE,
    TEXT("InterruptDone"), FALSE,
    TEXT("InterruptInitialize"), FALSE,
    TEXT("IntersectClipRect"), FALSE,
    TEXT("IntersectRect"), FALSE,
    TEXT("InvalidateRect"), FALSE,
    TEXT("IsAPIReady"), FALSE,
    TEXT("IsBadCodePtr"), FALSE,
    TEXT("IsBadPtr"), FALSE,
    TEXT("IsBadReadPtr"), FALSE,
    TEXT("IsBadWritePtr"), FALSE,
    TEXT("IsChild"), FALSE,
    TEXT("IsClipboardFormatAvailable"), FALSE,
    TEXT("IsDBCSLeadByte"), FALSE,
    TEXT("IsDBCSLeadByteEx"), FALSE,
    TEXT("IsDialogMessageW"), FALSE,
    TEXT("IsExiting"), FALSE,
    TEXT("IsPrimaryThread"), FALSE,
    TEXT("IsProcessDying"), FALSE,
    TEXT("IsRectEmpty"), FALSE,
    TEXT("IsValidCodePage"), FALSE,
    TEXT("IsValidLocale"), FALSE,
    TEXT("IsWindow"), FALSE,
    TEXT("IsWindowEnabled"), FALSE,
    TEXT("IsWindowVisible"), FALSE,
    TEXT("KernExtractIcons"), FALSE,
    TEXT("KernelIoControl"), FALSE,
    TEXT("KeybdGetDeviceInfo"), FALSE,
    TEXT("KeybdInitStates"), FALSE,
    TEXT("KeybdVKeyToUnicode"), FALSE,
    TEXT("KillAllOtherThreads"), FALSE,
    TEXT("KillTimer"), FALSE,
    TEXT("LCMapStringW"), FALSE,
    TEXT("LeaveCritSec"), FALSE,
    TEXT("LeaveCriticalSection"), FALSE,
    TEXT("LoadAcceleratorsW"), FALSE,
    TEXT("LoadBitmapW"), FALSE,
    TEXT("LoadCursorW"), FALSE,
    TEXT("LoadDriver"), FALSE,
    TEXT("LoadFSD"), FALSE,
    TEXT("LoadIconW"), FALSE,
    TEXT("LoadImageW"), FALSE,
    TEXT("LoadLibraryW"), FALSE,
    TEXT("LoadMenuW"), FALSE,
    TEXT("LoadResource"), FALSE,
    TEXT("LoadStringW"), FALSE,
    TEXT("LocalAlloc"), FALSE,
    TEXT("LocalAllocInProcess"), FALSE,
    TEXT("LocalFileTimeToFileTime"), FALSE,
    TEXT("LocalFree"), FALSE,
    TEXT("LocalFreeInProcess"), FALSE,
    TEXT("LocalReAlloc"), FALSE,
    TEXT("LocalSize"), FALSE,
    TEXT("LocalSizeInProcess"), FALSE,
    TEXT("LockPages"), FALSE,
    TEXT("MainThreadBaseFunc"), FALSE,
    TEXT("MapDialogRect"), FALSE,
    TEXT("MapPtrToProcess"), FALSE,
    TEXT("MapPtrUnsecure"), FALSE,
    TEXT("MapUncompressedFileW"), FALSE,
    TEXT("MapViewOfFile"), FALSE,
    TEXT("MapVirtualKeyW"), FALSE,
    TEXT("MapWindowPoints"), FALSE,
    TEXT("MaskBlt"), FALSE,
    TEXT("MessageBeep"), FALSE,
    TEXT("MessageBoxW"), FALSE,
    TEXT("MoveFileW"), FALSE,
    TEXT("MoveWindow"), FALSE,
    TEXT("MsgWaitForMultipleObjectsEx"), FALSE,
    TEXT("MultiByteToWideChar"), FALSE,
    TEXT("NKDbgPrintfW"), FALSE,
    TEXT("NKTerminateThread"), FALSE,
    TEXT("NKvDbgPrintfW"), FALSE,
    TEXT("NLedGetDeviceInfo"), FALSE,
    TEXT("NLedSetDevice"), FALSE,
    TEXT("NPXNPHandler"), FALSE,
    TEXT("NotifyForceCleanboot"), FALSE,
    TEXT("NotifyWinUserSystem"), FALSE,
    TEXT("OffsetRect"), FALSE,
    TEXT("OffsetRgn"), FALSE,
    TEXT("OpenClipboard"), FALSE,
    TEXT("OpenProcess"), FALSE,
    TEXT("OtherThreadsRunning"), FALSE,
    TEXT("OutputDebugStringW"), FALSE,
    TEXT("PPSHRestart"), FALSE,
    TEXT("PSLNotify"), FALSE,
    TEXT("PatBlt"), FALSE,
    TEXT("PeekMessageW"), FALSE,
    TEXT("PegClearUserNotification"), FALSE,
    TEXT("PegCreateDatabase"), FALSE,
    TEXT("PegDeleteDatabase"), FALSE,
    TEXT("PegDeleteRecord"), FALSE,
    TEXT("PegFindFirstDatabase"), FALSE,
    TEXT("PegFindNextDatabase"), FALSE,
    TEXT("PegGetUserNotificationPreferences"), FALSE,
    TEXT("PegHandleAppNotifications"), FALSE,
    TEXT("PegOidGetInfo"), FALSE,
    TEXT("PegOpenDatabase"), FALSE,
    TEXT("PegReadRecordProps"), FALSE,
    TEXT("PegRemoveFontResource"), FALSE,
    TEXT("PegRunAppAtEvent"), FALSE,
    TEXT("PegRunAppAtTime"), FALSE,
    TEXT("PegSeekDatabase"), FALSE,
    TEXT("PegSetDatabaseInfo"), FALSE,
    TEXT("PegSetUserNotification"), FALSE,
    TEXT("PegWriteRecordProps"), FALSE,
    TEXT("PlayEnhMetaFile"), FALSE,
    TEXT("PlaySoundW"), FALSE,
    TEXT("Polygon"), FALSE,
    TEXT("Polyline"), FALSE,
    TEXT("PostKeybdMessage"), FALSE,
    TEXT("PostMessageW"), FALSE,
    TEXT("PostQuitMessage"), FALSE,
    TEXT("PostThreadMessageW"), FALSE,
    TEXT("PowerOffSystem"), FALSE,
    TEXT("PrintTrackedItem"), FALSE,
    TEXT("ProcessDetachAllDLLs"), FALSE,
    TEXT("ProfileStart"), FALSE,
    TEXT("ProfileStop"), FALSE,
    TEXT("ProfileSyscall"), FALSE,
    TEXT("PtInRect"), FALSE,
    TEXT("PtInRegion"), FALSE,
    TEXT("PurgeComm"), FALSE,
    TEXT("QASetWindowsJournalHook"), FALSE,
    TEXT("QAUnhookWindowsJournalHook"), FALSE,
    TEXT("QueryAPISetID"), FALSE,
    TEXT("QueryPerformanceCounter"), FALSE,
    TEXT("QueryPerformanceFrequency"), FALSE,
    TEXT("RaiseException"), FALSE,
    TEXT("Random"), FALSE,
    TEXT("RasDeleteEntry"), FALSE,
    TEXT("RasDial"), FALSE,
    TEXT("RasEnumConnections"), FALSE,
    TEXT("RasEnumEntries"), FALSE,
    TEXT("RasGetConnectStatus"), FALSE,
    TEXT("RasGetEntryDevConfig"), FALSE,
    TEXT("RasGetEntryDialParams"), FALSE,
    TEXT("RasGetEntryProperties"), FALSE,
    TEXT("RasHangUp"), FALSE,
    TEXT("RasHangup"), FALSE,
    TEXT("RasIOControl"), FALSE,
    TEXT("RasRenameEntry"), FALSE,
    TEXT("RasSetEntryDevConfig"), FALSE,
    TEXT("RasSetEntryDialParams"), FALSE,
    TEXT("RasSetEntryProperties"), FALSE,
    TEXT("RasValidateEntryName"), FALSE,
    TEXT("ReadFile"), FALSE,
    TEXT("ReadFileWithSeek"), FALSE,
    TEXT("ReadProcessMemory"), FALSE,
    TEXT("ReadRegistryFromOEM"), FALSE,
    TEXT("RealizePalette"), FALSE,
    TEXT("RectInRegion"), FALSE,
    TEXT("RectVisible"), FALSE,
    TEXT("Rectangle"), FALSE,
    TEXT("RectangleAnimation"), FALSE,
    TEXT("RefreshKernelAlarm"), FALSE,
    TEXT("RegCloseKey"), FALSE,
    TEXT("RegCopyFile"), FALSE,
    TEXT("RegCreateKeyExW"), FALSE,
    TEXT("RegDeleteKeyW"), FALSE,
    TEXT("RegDeleteValueW"), FALSE,
    TEXT("RegEnumKeyExW"), FALSE,
    TEXT("RegEnumValueW"), FALSE,
    TEXT("RegFlushKey"), FALSE,
    TEXT("RegOpenKeyExW"), FALSE,
    TEXT("RegQueryInfoKeyW"), FALSE,
    TEXT("RegQueryValueExW"), FALSE,
    TEXT("RegRestoreFile"), FALSE,
    TEXT("RegSetValueExW"), FALSE,
    TEXT("RegisterAFS"), FALSE,
    TEXT("RegisterAFSName"), FALSE,
    TEXT("RegisterAPISet"), FALSE,
    TEXT("RegisterClassW"), FALSE,
    TEXT("RegisterClassWStub"), FALSE,
    TEXT("RegisterClipboardFormatW"), FALSE,
    TEXT("RegisterDbgZones"), FALSE,
    TEXT("RegisterDevice"), FALSE,
    TEXT("RegisterHiddenAFS"), FALSE,
    TEXT("RegisterHotKey"), FALSE,
    TEXT("RegisterSIPanel"), FALSE,
    TEXT("RegisterTaskBar"), FALSE,
    TEXT("RegisterTrackedItem"), FALSE,
    TEXT("RegisterWindowMessageW"), FALSE,
    TEXT("ReleaseCapture"), FALSE,
    TEXT("ReleaseDC"), FALSE,
    TEXT("ReleaseMutex"), FALSE,
    TEXT("RemoteLocalAlloc"), FALSE,
    TEXT("RemoteLocalFree"), FALSE,
    TEXT("RemoteLocalReAlloc"), FALSE,
    TEXT("RemoteLocalSize"), FALSE,
    TEXT("RemoveDirectoryW"), FALSE,
    TEXT("RemoveFontResourceW"), FALSE,
    TEXT("RemoveMenu"), FALSE,
    TEXT("RestoreDC"), FALSE,
    TEXT("ResumeThread"), FALSE,
    TEXT("RoundRect"), FALSE,
    TEXT("SHAddToRecentDocs"), FALSE,
    TEXT("SHCreateExplorerInstance"), FALSE,
    TEXT("SHCreateShortcut"), FALSE,
    TEXT("SHGetFileInfo"), FALSE,
    TEXT("SHGetShortcutTarget"), FALSE,
    TEXT("SHGetSpecialFolderPath"), FALSE,
    TEXT("SHLoadDIBitmap"), FALSE,
    TEXT("SHRemoveFontResource"), FALSE,
    TEXT("SHShowOutOfMemory"), FALSE,
    TEXT("SaveDC"), FALSE,
    TEXT("ScreenToClient"), FALSE,
    TEXT("ScrollDC"), FALSE,
    TEXT("ScrollWindowEx"), FALSE,
    TEXT("SelectClipRgn"), FALSE,
    TEXT("SelectObject"), FALSE,
    TEXT("SelectPalette"), FALSE,
    TEXT("SendDlgItemMessageW"), FALSE,
    TEXT("SendInput"), FALSE,
    TEXT("SendMessageW"), FALSE,
    TEXT("SendNotifyMessageW"), FALSE,
    TEXT("SetACP"), FALSE,
    TEXT("SetAbortProc"), FALSE,
    TEXT("SetActiveWindow"), FALSE,
    TEXT("SetAssociatedMenu"), FALSE,
    TEXT("SetBkColor"), FALSE,
    TEXT("SetBkMode"), FALSE,
    TEXT("SetBrushOrgEx"), FALSE,
    TEXT("SetCapture"), FALSE,
    TEXT("SetCaretBlinkTime"), FALSE,
    TEXT("SetCaretPos"), FALSE,
    TEXT("SetClassLong"), FALSE,
    TEXT("SetClassLongW"), FALSE,
    TEXT("SetCleanRebootFlag"), FALSE,
    TEXT("SetClipboardData"), FALSE,
    TEXT("SetCommBreak"), FALSE,
    TEXT("SetCommMask"), FALSE,
    TEXT("SetCommState"), FALSE,
    TEXT("SetCommTimeouts"), FALSE,
    TEXT("SetCursor"), FALSE,
    TEXT("SetCursorPos"), FALSE,
    TEXT("SetDaylightTime"), FALSE,
    TEXT("SetDbgZone"), FALSE,
    TEXT("SetDlgItemInt"), FALSE,
    TEXT("SetDlgItemTextW"), FALSE,
    TEXT("SetEndOfFile"), FALSE,
    TEXT("SetExceptionHandler"), FALSE,
    TEXT("SetFileAttributesW"), FALSE,
    TEXT("SetFilePointer"), FALSE,
    TEXT("SetFileTime"), FALSE,
    TEXT("SetFocus"), FALSE,
    TEXT("SetForegroundWindow"), FALSE,
    TEXT("SetGwesHeapMark"), FALSE,
    TEXT("SetGwesOOMEvent"), FALSE,
    TEXT("SetGwesPowerHandler"), FALSE,
    TEXT("SetHandleOwner"), FALSE,
    TEXT("SetHardwareWatch"), FALSE,
    TEXT("SetInterruptEvent"), FALSE,
    TEXT("SetKMode"), FALSE,
    TEXT("SetKernelAlarm"), FALSE,
    TEXT("SetKeyboardTarget"), FALSE,
    TEXT("SetLastError"), FALSE,
    TEXT("SetLocalTime"), FALSE,
    TEXT("SetLocaleInfoW"), FALSE,
    TEXT("SetLowestScheduledPriority"), FALSE,
    TEXT("SetMenuItemInfoW"), FALSE,
    TEXT("SetOEMCP"), FALSE,
    TEXT("SetObjectOwner"), FALSE,
    TEXT("SetPFHandle"), FALSE,
    TEXT("SetPaletteEntries"), FALSE,
    TEXT("SetParent"), FALSE,
    TEXT("SetPassword"), FALSE,
    TEXT("SetPasswordActive"), FALSE,
    TEXT("SetPixel"), FALSE,
    TEXT("SetPowerOffHandler"), FALSE,
    TEXT("SetProcPermissions"), FALSE,
    TEXT("SetROP2"), FALSE,
    TEXT("SetRealTime"), FALSE,
    TEXT("SetRect"), FALSE,
    TEXT("SetRectEmpty"), FALSE,
    TEXT("SetRectRgn"), FALSE,
    TEXT("SetScrollInfo"), FALSE,
    TEXT("SetScrollPos"), FALSE,
    TEXT("SetScrollRange"), FALSE,
    TEXT("SetStdioPathW"), FALSE,
    TEXT("SetSysColors"), FALSE,
    TEXT("SetSystemDefaultLCID"), FALSE,
    TEXT("SetSystemMemoryDivision"), FALSE,
    TEXT("SetSystemTime"), FALSE,
    TEXT("SetTextColor"), FALSE,
    TEXT("SetThreadContext"), FALSE,
    TEXT("SetThreadPriority"), FALSE,
    TEXT("SetTimeZoneBias"), FALSE,
    TEXT("SetTimeZoneInformation"), FALSE,
    TEXT("SetTimer"), FALSE,
    TEXT("SetViewportOrgEx"), FALSE,
    TEXT("SetWDevicePowerHandler"), FALSE,
    TEXT("SetWindowLongW"), FALSE,
    TEXT("SetWindowPos"), FALSE,
    TEXT("SetWindowRgn"), FALSE,
    TEXT("SetWindowTextW"), FALSE,
    TEXT("SetWindowsHookExW"), FALSE,
    TEXT("SetupComm"), FALSE,
    TEXT("ShellExecuteEx"), FALSE,
    TEXT("ShellModalEnd"), FALSE,
    TEXT("Shell_NotifyIcon"), FALSE,
    TEXT("ShowCaret"), FALSE,
    TEXT("ShowCursor"), FALSE,
    TEXT("ShowWindow"), FALSE,
    TEXT("SignalStarted"), FALSE,
    TEXT("SipEnumIM"), FALSE,
    TEXT("SipGetCurrentIM"), FALSE,
    TEXT("SipGetInfo"), FALSE,
    TEXT("SipRegisterNotification"), FALSE,
    TEXT("SipSetCurrentIM"), FALSE,
    TEXT("SipSetDefaultRect"), FALSE,
    TEXT("SipSetInfo"), FALSE,
    TEXT("SipShowIM"), FALSE,
    TEXT("SipStatus"), FALSE,
    TEXT("SizeofResource"), FALSE,
    TEXT("Sleep"), FALSE,
    TEXT("StartDocW"), FALSE,
    TEXT("StartPage"), FALSE,
    TEXT("StretchBlt"), FALSE,
    TEXT("StringCompress"), FALSE,
    TEXT("StringDecompress"), FALSE,
    TEXT("SubtractRect"), FALSE,
    TEXT("SuspendThread"), FALSE,
    TEXT("SystemIdleTimerReset"), FALSE,
    TEXT("SystemMemoryLow"), FALSE,
    TEXT("SystemParametersInfoW"), FALSE,
    TEXT("SystemStarted"), FALSE,
    TEXT("SystemTimeToFileTime"), FALSE,
    TEXT("THCreateSnapshot"), FALSE,
    TEXT("THGrow"), FALSE,
    TEXT("TakeCritSec"), FALSE,
    TEXT("TerminateProcess"), FALSE,
    TEXT("TerminateThread"), FALSE,
    TEXT("ThisIsGwes"), FALSE,
    TEXT("ThreadAttachAllDLLs"), FALSE,
    TEXT("ThreadBaseFunc"), FALSE,
    TEXT("ThreadDetachAllDLLs"), FALSE,
    TEXT("TlsCall"), FALSE,
    TEXT("TlsGetValue"), FALSE,
    TEXT("TlsSetValue"), FALSE,
    TEXT("TouchCalibrate"), FALSE,
    TEXT("TrackPopupMenuEx"), FALSE,
    TEXT("TranslateAcceleratorW"), FALSE,
    TEXT("TranslateCharsetInfo"), FALSE,
    TEXT("TranslateMessage"), FALSE,
    TEXT("TransmitCommChar"), FALSE,
    TEXT("TransparentImage"), FALSE,
    TEXT("TurnOffProfiling"), FALSE,
    TEXT("TurnOffSyscallProfiling"), FALSE,
    TEXT("TurnOnProfiling"), FALSE,
    TEXT("TurnOnSyscallProfiling"), FALSE,
    TEXT("U_rclose"), FALSE,
    TEXT("U_rlseek"), FALSE,
    TEXT("U_ropen"), FALSE,
    TEXT("U_rread"), FALSE,
    TEXT("U_rwrite"), FALSE,
    TEXT("UnhookWindowsHookEx"), FALSE,
    TEXT("UnionRect"), FALSE,
    TEXT("UnlockPages"), FALSE,
    TEXT("UnmapViewOfFile"), FALSE,
    TEXT("UnregisterClassW"), FALSE,
    TEXT("UnregisterFunc1"), FALSE,
    TEXT("UnregisterHotKey"), FALSE,
    TEXT("UpdateWindow"), FALSE,
    TEXT("ValidateRect"), FALSE,
    TEXT("VerifyAPIHandle"), FALSE,
    TEXT("VirtualAlloc"), FALSE,
    TEXT("VirtualCopy"), FALSE,
    TEXT("VirtualFree"), FALSE,
    TEXT("VirtualProtect"), FALSE,
    TEXT("VirtualQuery"), FALSE,
    TEXT("WNetAddConnection3W"), FALSE,
    TEXT("WNetCancelConnection2W"), FALSE,
    TEXT("WNetCloseEnum"), FALSE,
    TEXT("WNetConnectionDialog1W"), FALSE,
    TEXT("WNetDisconnectDialog"), FALSE,
    TEXT("WNetDisconnectDialog1W"), FALSE,
    TEXT("WNetEnumResourceW"), FALSE,
    TEXT("WNetGetConnectionW"), FALSE,
    TEXT("WNetGetUniversalNameW"), FALSE,
    TEXT("WNetGetUserW"), FALSE,
    TEXT("WNetOpenEnumW"), FALSE,
    TEXT("WaitCommEvent"), FALSE,
    TEXT("WaitForDebugEvent"), FALSE,
    TEXT("WaitForMultipleObjects"), FALSE,
    TEXT("WaitForSingleObject"), FALSE,
    TEXT("WideCharToMultiByte"), FALSE,
    TEXT("WindowFromPoint"), FALSE,
    TEXT("WriteDebugLED"), FALSE,
    TEXT("WriteFile"), FALSE,
    TEXT("WriteFileWithSeek"), FALSE,
    TEXT("WriteProcessMemory"), FALSE,
    TEXT("WriteRegistryToOEM"), FALSE,
    TEXT("abs"), FALSE,
    TEXT("acmDriverAdd"), FALSE,
    TEXT("acmDriverClose"), FALSE,
    TEXT("acmDriverDetails"), FALSE,
    TEXT("acmDriverEnum"), FALSE,
    TEXT("acmDriverID"), FALSE,
    TEXT("acmDriverMessage"), FALSE,
    TEXT("acmDriverOpen"), FALSE,
    TEXT("acmDriverPriority"), FALSE,
    TEXT("acmDriverRemove"), FALSE,
    TEXT("acmFilterChoose"), FALSE,
    TEXT("acmFilterDetails"), FALSE,
    TEXT("acmFilterEnum"), FALSE,
    TEXT("acmFilterTagDetails"), FALSE,
    TEXT("acmFilterTagEnum"), FALSE,
    TEXT("acmFormatChoose"), FALSE,
    TEXT("acmFormatDetails"), FALSE,
    TEXT("acmFormatEnum"), FALSE,
    TEXT("acmFormatSuggest"), FALSE,
    TEXT("acmFormatTagDetails"), FALSE,
    TEXT("acmFormatTagEnum"), FALSE,
    TEXT("acmGetVersion"), FALSE,
    TEXT("acmMetrics"), FALSE,
    TEXT("acmStreamClose"), FALSE,
    TEXT("acmStreamConvert"), FALSE,
    TEXT("acmStreamMessage"), FALSE,
    TEXT("acmStreamOpen"), FALSE,
    TEXT("acmStreamPrepareHeader"), FALSE,
    TEXT("acmStreamReset"), FALSE,
    TEXT("acmStreamSize"), FALSE,
    TEXT("acmStreamUnprepareHeader"), FALSE,
    TEXT("acos"), FALSE,
    TEXT("asin"), FALSE,
    TEXT("atan"), FALSE,
    TEXT("atan2"), FALSE,
    TEXT("atof"), FALSE,
    TEXT("atoi"), FALSE,
    TEXT("atol"), FALSE,
    TEXT("ceil"), FALSE,
    TEXT("clearerr"), FALSE,
    TEXT("cos"), FALSE,
    TEXT("cosh"), FALSE,
    TEXT("difftime"), FALSE,
    TEXT("div"), FALSE,
    TEXT("exp"), FALSE,
    TEXT("fabs"), FALSE,
    TEXT("fclose"), FALSE,
    TEXT("feof"), FALSE,
    TEXT("ferror"), FALSE,
    TEXT("fflush"), FALSE,
    TEXT("fgetc"), FALSE,
    TEXT("fgetpos"), FALSE,
    TEXT("fgets"), FALSE,
    TEXT("fgetwc"), FALSE,
    TEXT("fgetws"), FALSE,
    TEXT("floor"), FALSE,
    TEXT("fmod"), FALSE,
    TEXT("fopen"), FALSE,
    TEXT("fprintf"), FALSE,
    TEXT("fputc"), FALSE,
    TEXT("fputs"), FALSE,
    TEXT("fputwc"), FALSE,
    TEXT("fputws"), FALSE,
    TEXT("fread"), FALSE,
    TEXT("free"), FALSE,
    TEXT("frexp"), FALSE,
    TEXT("fscanf"), FALSE,
    TEXT("fseek"), FALSE,
    TEXT("fsetpos"), FALSE,
    TEXT("ftell"), FALSE,
    TEXT("fwprintf"), FALSE,
    TEXT("fwrite"), FALSE,
    TEXT("fwscanf"), FALSE,
    TEXT("getchar"), FALSE,
    TEXT("gets"), FALSE,
    TEXT("getwchar"), FALSE,
    TEXT("iswctype"), FALSE,
    TEXT("keybd_event"), FALSE,
    TEXT("labs"), FALSE,
    TEXT("ldexp"), FALSE,
    TEXT("ldiv"), FALSE,
    TEXT("lineAddProvider"), FALSE,
    TEXT("lineClose"), FALSE,
    TEXT("lineConfigDialogEdit"), FALSE,
    TEXT("lineDeallocateCall"), FALSE,
    TEXT("lineDrop"), FALSE,
    TEXT("lineGetDevCaps"), FALSE,
    TEXT("lineGetDevConfig"), FALSE,
    TEXT("lineGetID"), FALSE,
    TEXT("lineGetTranslateCaps"), FALSE,
    TEXT("lineInitialize"), FALSE,
    TEXT("lineMakeCall"), FALSE,
    TEXT("lineNegotiateAPIVersion"), FALSE,
    TEXT("lineOpen"), FALSE,
    TEXT("lineSetCurrentLocation"), FALSE,
    TEXT("lineSetDevConfig"), FALSE,
    TEXT("lineSetStatusMessages"), FALSE,
    TEXT("lineShutdown"), FALSE,
    TEXT("lineTranslateAddress"), FALSE,
    TEXT("lineTranslateDialog"), FALSE,
    TEXT("log"), FALSE,
    TEXT("log10"), FALSE,
    TEXT("longjmp"), FALSE,
    TEXT("lstrcmpW"), FALSE,
    TEXT("lstrcmpiW"), FALSE,
    TEXT("malloc"), FALSE,
    TEXT("mbstowcs"), FALSE,
    TEXT("memchr"), FALSE,
    TEXT("memcmp"), FALSE,
    TEXT("memcpy"), FALSE,
    TEXT("memmove"), FALSE,
    TEXT("memset"), FALSE,
    TEXT("modf"), FALSE,
    TEXT("mouse_event"), FALSE,
    TEXT("pow"), FALSE,
    TEXT("printf"), FALSE,
    TEXT("putchar"), FALSE,
    TEXT("puts"), FALSE,
    TEXT("putwchar"), FALSE,
    TEXT("qsort"), FALSE,
    TEXT("rand"), FALSE,
    TEXT("realloc"), FALSE,
    TEXT("scanf"), FALSE,
    TEXT("sin"), FALSE,
    TEXT("sinh"), FALSE,
    TEXT("sndPlaySoundW"), FALSE,
    TEXT("sprintf"), FALSE,
    TEXT("sqrt"), FALSE,
    TEXT("srand"), FALSE,
    TEXT("sscanf"), FALSE,
    TEXT("strcat"), FALSE,
    TEXT("strchr"), FALSE,
    TEXT("strcmp"), FALSE,
    TEXT("strcpy"), FALSE,
    TEXT("strcspn"), FALSE,
    TEXT("strlen"), FALSE,
    TEXT("strncat"), FALSE,
    TEXT("strncmp"), FALSE,
    TEXT("strncpy"), FALSE,
    TEXT("strstr"), FALSE,
    TEXT("strtok"), FALSE,
    TEXT("swprintf"), FALSE,
    TEXT("swscanf"), FALSE,
    TEXT("tan"), FALSE,
    TEXT("tanh"), FALSE,
    TEXT("tolower"), FALSE,
    TEXT("toupper"), FALSE,
    TEXT("towlower"), FALSE,
    TEXT("towupper"), FALSE,
    TEXT("ungetc"), FALSE,
    TEXT("ungetwc"), FALSE,
    TEXT("vfprintf"), FALSE,
    TEXT("vfwprintf"), FALSE,
    TEXT("vprintf"), FALSE,
    TEXT("vsprintf"), FALSE,
    TEXT("vswprintf"), FALSE,
    TEXT("vwprintf"), FALSE,
    TEXT("waveInAddBuffer"), FALSE,
    TEXT("waveInClose"), FALSE,
    TEXT("waveInGetDevCaps"), FALSE,
    TEXT("waveInGetErrorText"), FALSE,
    TEXT("waveInGetID"), FALSE,
    TEXT("waveInGetNumDevs"), FALSE,
    TEXT("waveInGetPosition"), FALSE,
    TEXT("waveInMessage"), FALSE,
    TEXT("waveInOpen"), FALSE,
    TEXT("waveInPrepareHeader"), FALSE,
    TEXT("waveInReset"), FALSE,
    TEXT("waveInStart"), FALSE,
    TEXT("waveInStop"), FALSE,
    TEXT("waveInUnprepareHeader"), FALSE,
    TEXT("waveOutBreakLoop"), FALSE,
    TEXT("waveOutClose"), FALSE,
    TEXT("waveOutGetDevCaps"), FALSE,
    TEXT("waveOutGetErrorText"), FALSE,
    TEXT("waveOutGetID"), FALSE,
    TEXT("waveOutGetNumDevs"), FALSE,
    TEXT("waveOutGetPitch"), FALSE,
    TEXT("waveOutGetPlaybackRate"), FALSE,
    TEXT("waveOutGetPosition"), FALSE,
    TEXT("waveOutGetVolume"), FALSE,
    TEXT("waveOutMessage"), FALSE,
    TEXT("waveOutOpen"), FALSE,
    TEXT("waveOutPause"), FALSE,
    TEXT("waveOutPrepareHeader"), FALSE,
    TEXT("waveOutReset"), FALSE,
    TEXT("waveOutRestart"), FALSE,
    TEXT("waveOutSetPitch"), FALSE,
    TEXT("waveOutSetPlaybackRate"), FALSE,
    TEXT("waveOutSetVolume"), FALSE,
    TEXT("waveOutUnprepareHeader"), FALSE,
    TEXT("waveOutWrite"), FALSE,
    TEXT("wcscat"), FALSE,
    TEXT("wcschr"), FALSE,
    TEXT("wcscmp"), FALSE,
    TEXT("wcscpy"), FALSE,
    TEXT("wcscspn"), FALSE,
    TEXT("wcslen"), FALSE,
    TEXT("wcsncat"), FALSE,
    TEXT("wcsncmp"), FALSE,
    TEXT("wcsncpy"), FALSE,
    TEXT("wcspbrk"), FALSE,
    TEXT("wcsrchr"), FALSE,
    TEXT("wcsspn"), FALSE,
    TEXT("wcsstr"), FALSE,
    TEXT("wcstod"), FALSE,
    TEXT("wcstok"), FALSE,
    TEXT("wcstol"), FALSE,
    TEXT("wcstombs"), FALSE,
    TEXT("wcstoul"), FALSE,
    TEXT("wprintf"), FALSE,
    TEXT("wscanf"), FALSE,
    TEXT("wsprintfW"), FALSE,
    TEXT("wvsprintfW"), FALSE,

    NULL, FALSE  // Data structure must end with a NULL function name.
};

FUNCLIST aflCommCtrl[] =
{
    TEXT("CenterWindow"), FALSE,
    TEXT("CommandBands_AddAdornments"), FALSE,
    TEXT("CommandBands_AddBands"), FALSE,
    TEXT("CommandBands_Create"), FALSE,
    TEXT("CommandBands_GetCommandBar"), FALSE,
    TEXT("CommandBands_GetRestoreInformation"), FALSE,
    TEXT("CommandBands_Show"), FALSE,
    TEXT("CommandBar_AddAdornments"), FALSE,
    TEXT("CommandBar_AddBitmap"), FALSE,
    TEXT("CommandBar_AlignAdornments"), FALSE,
    TEXT("CommandBar_Create"), FALSE,
    TEXT("CommandBar_DrawMenuBar"), FALSE,
    TEXT("CommandBar_GetItemWindow"), FALSE,
    TEXT("CommandBar_GetMenu"), FALSE,
    TEXT("CommandBar_Height"), FALSE,
    TEXT("CommandBar_InsertComboBox"), FALSE,
    TEXT("CommandBar_InsertControl"), FALSE,
    TEXT("CommandBar_InsertMenubar"), FALSE,
    TEXT("CommandBar_InsertMenubarEx"), FALSE,
    TEXT("CommandBar_Show"), FALSE,
    TEXT("CreatePropertySheetPageW"), FALSE,
    TEXT("CreateStatusWindowW"), FALSE,
    TEXT("CreateToolbar"), FALSE,
    TEXT("CreateToolbarEx"), FALSE,
    TEXT("CreateUpDownControl"), FALSE,
    TEXT("DPA_Destroy"), FALSE,
    TEXT("DPA_GetPtr"), FALSE,
    TEXT("DSA_Create"), FALSE,
    TEXT("DSA_DeleteAllItems"), FALSE,
    TEXT("DSA_DeleteItem"), FALSE,
    TEXT("DSA_Destroy"), FALSE,
    TEXT("DSA_GetItem"), FALSE,
    TEXT("DSA_GetItemPtr"), FALSE,
    TEXT("DSA_InsertItem"), FALSE,
    TEXT("DSA_SetItem"), FALSE,
    TEXT("DestroyPropertySheetPage"), FALSE,
    TEXT("DrawStatusTextW"), FALSE,
    TEXT("InitCommonControls"), FALSE,
    TEXT("InitCommonControlsEx"), FALSE,
    TEXT("InvertRect"), FALSE,
    TEXT("IsCommandBarMessage"), FALSE,
    TEXT("PropertySheetW"), FALSE,
    TEXT("StrToIntW"), FALSE,
    TEXT("Str_SetPtrW"), FALSE,
    NULL, FALSE  // Data structure must end with a NULL function name.
};

FUNCLIST aflCommDlg[] =
{
    TEXT("ChooseColor"), FALSE,
    TEXT("CommDlgExtendedError"), FALSE,
    TEXT("PageSetupDlgW"), FALSE,
    TEXT("PrintDlg"), FALSE,
    NULL, FALSE  // Data structure must end with a NULL function name.
};

FUNCLIST aflOle32[] =
{
    TEXT("CLSIDFromProgID"), FALSE,
    TEXT("CLSIDFromString"), FALSE,
    TEXT("CoCreateInstance"), FALSE,
    TEXT("CoFreeLibrary"), FALSE,
    TEXT("CoFreeUnusedLibraries"), FALSE,
    TEXT("CoGetClassObject"), FALSE,
    TEXT("CoInitializeEx"), FALSE,
    TEXT("CoLoadLibrary"), FALSE,
    TEXT("CoSetState"), FALSE,
    TEXT("CoTaskMemAlloc"), FALSE,
    TEXT("CoTaskMemFree"), FALSE,
    TEXT("CoTaskMemRealloc"), FALSE,
    TEXT("CoTaskMemSize"), FALSE,
    TEXT("CoUninitialize"), FALSE,
    TEXT("CreateBindCtx"), FALSE,
    TEXT("CreateOleAdviseHolder"), FALSE,
    TEXT("GetClassFile"), FALSE,
    TEXT("OleCreate"), FALSE,
    TEXT("OleDraw"), FALSE,
    TEXT("OleIsRunning"), FALSE,
    TEXT("OleRun"), FALSE,
    TEXT("OleSave"), FALSE,
    TEXT("OleSetContainedObject"), FALSE,
    TEXT("OleSetMenuDescriptor"), FALSE,
    TEXT("ReadClassStg"), FALSE,
    TEXT("ReadClassStm"), FALSE,
    TEXT("ReleaseStgMedium"), FALSE,
    TEXT("StgCreateDocfile"), FALSE,
    TEXT("StgCreateDocfileOnILockBytes"), FALSE,
    TEXT("StgOpenStorage"), FALSE,
    TEXT("StgOpenStorageOnILockBytes"), FALSE,
    TEXT("StringFromCLSID"), FALSE,
    TEXT("StringFromGUID2"), FALSE,
    TEXT("StringFromIID"), FALSE,
    TEXT("WriteClassStg"), FALSE,
    TEXT("WriteClassStm"), FALSE,
    NULL, FALSE  // Data structure must end with a NULL function name.
};

FUNCLIST aflAut32[] =
{
    TEXT("BstrFromVector"), FALSE,
    TEXT("CreateErrorInfo"), FALSE,
    TEXT("CreateTypeLib2"), FALSE,
    TEXT("DispGetIDsOfNames"), FALSE,
    TEXT("DispGetParam"), FALSE,
    TEXT("DispInvoke"), FALSE,
    TEXT("GetErrorInfo"), FALSE,
    TEXT("LoadRegTypeLib"), FALSE,
    TEXT("LoadTypeLib"), FALSE,
    TEXT("OACreateTypeLib2"), FALSE,
    TEXT("RegisterTypeLib"), FALSE,
    TEXT("SafeArrayAccessData"), FALSE,
    TEXT("SafeArrayAllocData"), FALSE,
    TEXT("SafeArrayAllocDescriptor"), FALSE,
    TEXT("SafeArrayCopy"), FALSE,
    TEXT("SafeArrayCopyData"), FALSE,
    TEXT("SafeArrayCreate"), FALSE,
    TEXT("SafeArrayCreateVector"), FALSE,
    TEXT("SafeArrayDestroy"), FALSE,
    TEXT("SafeArrayDestroyData"), FALSE,
    TEXT("SafeArrayDestroyDescriptor"), FALSE,
    TEXT("SafeArrayGetDim"), FALSE,
    TEXT("SafeArrayGetElement"), FALSE,
    TEXT("SafeArrayGetElemsize"), FALSE,
    TEXT("SafeArrayGetLBound"), FALSE,
    TEXT("SafeArrayGetUBound"), FALSE,
    TEXT("SafeArrayLock"), FALSE,
    TEXT("SafeArrayPtrOfIndex"), FALSE,
    TEXT("SafeArrayPutElement"), FALSE,
    TEXT("SafeArrayRedim"), FALSE,
    TEXT("SafeArrayUnaccessData"), FALSE,
    TEXT("SafeArrayUnlock"), FALSE,
    TEXT("SetErrorInfo"), FALSE,
    TEXT("SysAllocString"), FALSE,
    TEXT("SysAllocStringByteLen"), FALSE,
    TEXT("SysAllocStringLen"), FALSE,
    TEXT("SysFreeString"), FALSE,
    TEXT("SysReAllocString"), FALSE,
    TEXT("SysReAllocStringLen"), FALSE,
    TEXT("SysStringByteLen"), FALSE,
    TEXT("SysStringLen"), FALSE,
    TEXT("SystemTimeToVariantTime"), FALSE,
    TEXT("VarBoolFromCy"), FALSE,
    TEXT("VarBoolFromDate"), FALSE,
    TEXT("VarBoolFromDec"), FALSE,
    TEXT("VarBoolFromDisp"), FALSE,
    TEXT("VarBoolFromI1"), FALSE,
    TEXT("VarBoolFromI2"), FALSE,
    TEXT("VarBoolFromI4"), FALSE,
    TEXT("VarBoolFromR4"), FALSE,
    TEXT("VarBoolFromR8"), FALSE,
    TEXT("VarBoolFromStr"), FALSE,
    TEXT("VarBoolFromUI1"), FALSE,
    TEXT("VarBoolFromUI2"), FALSE,
    TEXT("VarBoolFromUI4"), FALSE,
    TEXT("VarBstrFromBool"), FALSE,
    TEXT("VarBstrFromCy"), FALSE,
    TEXT("VarBstrFromDate"), FALSE,
    TEXT("VarBstrFromDec"), FALSE,
    TEXT("VarBstrFromDisp"), FALSE,
    TEXT("VarBstrFromI1"), FALSE,
    TEXT("VarBstrFromI2"), FALSE,
    TEXT("VarBstrFromI4"), FALSE,
    TEXT("VarBstrFromR4"), FALSE,
    TEXT("VarBstrFromR8"), FALSE,
    TEXT("VarBstrFromUI1"), FALSE,
    TEXT("VarBstrFromUI2"), FALSE,
    TEXT("VarBstrFromUI4"), FALSE,
    TEXT("VarCyFromBool"), FALSE,
    TEXT("VarCyFromDate"), FALSE,
    TEXT("VarCyFromDec"), FALSE,
    TEXT("VarCyFromDisp"), FALSE,
    TEXT("VarCyFromI1"), FALSE,
    TEXT("VarCyFromI2"), FALSE,
    TEXT("VarCyFromI4"), FALSE,
    TEXT("VarCyFromR4"), FALSE,
    TEXT("VarCyFromR8"), FALSE,
    TEXT("VarCyFromStr"), FALSE,
    TEXT("VarCyFromUI1"), FALSE,
    TEXT("VarCyFromUI2"), FALSE,
    TEXT("VarCyFromUI4"), FALSE,
    TEXT("VarDateFromBool"), FALSE,
    TEXT("VarDateFromCy"), FALSE,
    TEXT("VarDateFromDec"), FALSE,
    TEXT("VarDateFromDisp"), FALSE,
    TEXT("VarDateFromI1"), FALSE,
    TEXT("VarDateFromI2"), FALSE,
    TEXT("VarDateFromI4"), FALSE,
    TEXT("VarDateFromR4"), FALSE,
    TEXT("VarDateFromR8"), FALSE,
    TEXT("VarDateFromStr"), FALSE,
    TEXT("VarDateFromUI1"), FALSE,
    TEXT("VarDateFromUI2"), FALSE,
    TEXT("VarDateFromUI4"), FALSE,
    TEXT("VarDateFromUdate"), FALSE,
    TEXT("VarDecFromBool"), FALSE,
    TEXT("VarDecFromCy"), FALSE,
    TEXT("VarDecFromDate"), FALSE,
    TEXT("VarDecFromDisp"), FALSE,
    TEXT("VarDecFromI1"), FALSE,
    TEXT("VarDecFromI2"), FALSE,
    TEXT("VarDecFromI4"), FALSE,
    TEXT("VarDecFromR4"), FALSE,
    TEXT("VarDecFromR8"), FALSE,
    TEXT("VarDecFromStr"), FALSE,
    TEXT("VarDecFromUI1"), FALSE,
    TEXT("VarDecFromUI2"), FALSE,
    TEXT("VarDecFromUI4"), FALSE,
    TEXT("VarI1FromBool"), FALSE,
    TEXT("VarI1FromCy"), FALSE,
    TEXT("VarI1FromDate"), FALSE,
    TEXT("VarI1FromDec"), FALSE,
    TEXT("VarI1FromDisp"), FALSE,
    TEXT("VarI1FromI2"), FALSE,
    TEXT("VarI1FromI4"), FALSE,
    TEXT("VarI1FromR4"), FALSE,
    TEXT("VarI1FromR8"), FALSE,
    TEXT("VarI1FromStr"), FALSE,
    TEXT("VarI1FromUI1"), FALSE,
    TEXT("VarI1FromUI2"), FALSE,
    TEXT("VarI1FromUI4"), FALSE,
    TEXT("VarI2FromBool"), FALSE,
    TEXT("VarI2FromCy"), FALSE,
    TEXT("VarI2FromDate"), FALSE,
    TEXT("VarI2FromDec"), FALSE,
    TEXT("VarI2FromDisp"), FALSE,
    TEXT("VarI2FromI1"), FALSE,
    TEXT("VarI2FromI4"), FALSE,
    TEXT("VarI2FromR4"), FALSE,
    TEXT("VarI2FromR8"), FALSE,
    TEXT("VarI2FromStr"), FALSE,
    TEXT("VarI2FromUI1"), FALSE,
    TEXT("VarI2FromUI2"), FALSE,
    TEXT("VarI2FromUI4"), FALSE,
    TEXT("VarI4FromBool"), FALSE,
    TEXT("VarI4FromCy"), FALSE,
    TEXT("VarI4FromDate"), FALSE,
    TEXT("VarI4FromDec"), FALSE,
    TEXT("VarI4FromDisp"), FALSE,
    TEXT("VarI4FromI1"), FALSE,
    TEXT("VarI4FromI2"), FALSE,
    TEXT("VarI4FromR4"), FALSE,
    TEXT("VarI4FromR8"), FALSE,
    TEXT("VarI4FromStr"), FALSE,
    TEXT("VarI4FromUI1"), FALSE,
    TEXT("VarI4FromUI2"), FALSE,
    TEXT("VarI4FromUI4"), FALSE,
    TEXT("VarNumFromParseNum"), FALSE,
    TEXT("VarParseNumFromStr"), FALSE,
    TEXT("VarR4FromBool"), FALSE,
    TEXT("VarR4FromCy"), FALSE,
    TEXT("VarR4FromDate"), FALSE,
    TEXT("VarR4FromDec"), FALSE,
    TEXT("VarR4FromDisp"), FALSE,
    TEXT("VarR4FromI1"), FALSE,
    TEXT("VarR4FromI2"), FALSE,
    TEXT("VarR4FromI4"), FALSE,
    TEXT("VarR4FromR8"), FALSE,
    TEXT("VarR4FromStr"), FALSE,
    TEXT("VarR4FromUI1"), FALSE,
    TEXT("VarR4FromUI2"), FALSE,
    TEXT("VarR4FromUI4"), FALSE,
    TEXT("VarR8FromBool"), FALSE,
    TEXT("VarR8FromCy"), FALSE,
    TEXT("VarR8FromDate"), FALSE,
    TEXT("VarR8FromDec"), FALSE,
    TEXT("VarR8FromDisp"), FALSE,
    TEXT("VarR8FromI1"), FALSE,
    TEXT("VarR8FromI2"), FALSE,
    TEXT("VarR8FromI4"), FALSE,
    TEXT("VarR8FromR4"), FALSE,
    TEXT("VarR8FromStr"), FALSE,
    TEXT("VarR8FromUI1"), FALSE,
    TEXT("VarR8FromUI2"), FALSE,
    TEXT("VarR8FromUI4"), FALSE,
    TEXT("VarUI1FromBool"), FALSE,
    TEXT("VarUI1FromCy"), FALSE,
    TEXT("VarUI1FromDate"), FALSE,
    TEXT("VarUI1FromDec"), FALSE,
    TEXT("VarUI1FromDisp"), FALSE,
    TEXT("VarUI1FromI1"), FALSE,
    TEXT("VarUI1FromI2"), FALSE,
    TEXT("VarUI1FromI4"), FALSE,
    TEXT("VarUI1FromR4"), FALSE,
    TEXT("VarUI1FromR8"), FALSE,
    TEXT("VarUI1FromStr"), FALSE,
    TEXT("VarUI1FromUI2"), FALSE,
    TEXT("VarUI1FromUI4"), FALSE,
    TEXT("VarUI2FromBool"), FALSE,
    TEXT("VarUI2FromCy"), FALSE,
    TEXT("VarUI2FromDate"), FALSE,
    TEXT("VarUI2FromDec"), FALSE,
    TEXT("VarUI2FromDisp"), FALSE,
    TEXT("VarUI2FromI1"), FALSE,
    TEXT("VarUI2FromI2"), FALSE,
    TEXT("VarUI2FromI4"), FALSE,
    TEXT("VarUI2FromR4"), FALSE,
    TEXT("VarUI2FromR8"), FALSE,
    TEXT("VarUI2FromStr"), FALSE,
    TEXT("VarUI2FromUI1"), FALSE,
    TEXT("VarUI2FromUI4"), FALSE,
    TEXT("VarUI4FromBool"), FALSE,
    TEXT("VarUI4FromCy"), FALSE,
    TEXT("VarUI4FromDate"), FALSE,
    TEXT("VarUI4FromDec"), FALSE,
    TEXT("VarUI4FromDisp"), FALSE,
    TEXT("VarUI4FromI1"), FALSE,
    TEXT("VarUI4FromI2"), FALSE,
    TEXT("VarUI4FromI4"), FALSE,
    TEXT("VarUI4FromR4"), FALSE,
    TEXT("VarUI4FromR8"), FALSE,
    TEXT("VarUI4FromStr"), FALSE,
    TEXT("VarUI4FromUI1"), FALSE,
    TEXT("VarUI4FromUI2"), FALSE,
    TEXT("VarUdateFromDate"), FALSE,
    TEXT("VariantChangeType"), FALSE,
    TEXT("VariantChangeTypeEx"), FALSE,
    TEXT("VariantClear"), FALSE,
    TEXT("VariantCopy"), FALSE,
    TEXT("VariantCopyInd"), FALSE,
    TEXT("VariantInit"), FALSE,
    TEXT("VariantTimeToSystemTime"), FALSE,
    TEXT("VectorFromBstr"),
    NULL, FALSE  // Data structure must end with a NULL function name.
};

FUNCLIST aflSecur32[] =
{
    TEXT("AcceptSecurityContext"), FALSE,
    TEXT("AcquireCredentialsHandleW"), FALSE,
    TEXT("ApplyControlToken"), FALSE,
    TEXT("DeleteSecurityContext"), FALSE,
    TEXT("EnumerateSecurityPackagesW"), FALSE,
    TEXT("FreeContextBuffer"), FALSE,
    TEXT("FreeCredentialsHandle"), FALSE,
    TEXT("ImpersonateSecurityContext"), FALSE,
    TEXT("InitSecurityInterfaceA"), FALSE,
    TEXT("InitSecurityInterfaceW"), FALSE,
    TEXT("InitializeSecurityContextW"), FALSE,
    TEXT("MakeSignature"), FALSE,
    TEXT("QueryContextAttributesW"), FALSE,
    TEXT("QueryCredentialsAttributesW"), FALSE,
    TEXT("QuerySecurityPackageInfoW"), FALSE,
    TEXT("RevertSecurityContext"), FALSE,
    TEXT("SealMessage"), FALSE,
    TEXT("UnsealMessage"), FALSE,
    TEXT("VerifySignature"), FALSE,
    NULL, FALSE  // Data structure must end with a NULL function name.
};

FUNCLIST aflToolHelp[] =
{
    TEXT("CloseToolhelp32Snapshot"), FALSE,
    TEXT("CreateToolhelp32Snapshot"), FALSE,
    TEXT("Heap32First"), FALSE,
    TEXT("Heap32ListFirst"), FALSE,
    TEXT("Heap32ListNext"), FALSE,
    TEXT("Heap32Next"), FALSE,
    TEXT("Module32First"), FALSE,
    TEXT("Module32Next"), FALSE,
    TEXT("Process32First"), FALSE,
    TEXT("Process32Next"), FALSE,
    TEXT("Thread32First"), FALSE,
    TEXT("Thread32Next"), FALSE,
    TEXT("Toolhelp32ReadProcessMemory"), FALSE,
    NULL, FALSE  // Data structure must end with a NULL function name.
};

FUNCLIST aflWinInet[] =
{
    TEXT("CommitUrlCacheEntryA"), FALSE,
    TEXT("CommitUrlCacheEntryW"), FALSE,
    TEXT("CreateUrlCacheContainerA"), FALSE,
    TEXT("CreateUrlCacheContainerW"), FALSE,
    TEXT("CreateUrlCacheEntryA"), FALSE,
    TEXT("CreateUrlCacheEntryW"), FALSE,
    TEXT("CreateUrlCacheGroup"), FALSE,
    TEXT("DeleteIE3Cache"), FALSE,
    TEXT("DeleteUrlCacheContainerA"), FALSE,
    TEXT("DeleteUrlCacheContainerW"), FALSE,
    TEXT("DeleteUrlCacheEntry"), FALSE,
    TEXT("DeleteUrlCacheGroup"), FALSE,
    TEXT("FindCloseUrlCache"), FALSE,
    TEXT("FindFirstUrlCacheContainerA"), FALSE,
    TEXT("FindFirstUrlCacheContainerW"), FALSE,
    TEXT("FindFirstUrlCacheEntryA"), FALSE,
    TEXT("FindFirstUrlCacheEntryExA"), FALSE,
    TEXT("FindFirstUrlCacheEntryExW"), FALSE,
    TEXT("FindFirstUrlCacheEntryW"), FALSE,
    TEXT("FindNextUrlCacheContainerA"), FALSE,
    TEXT("FindNextUrlCacheContainerW"), FALSE,
    TEXT("FindNextUrlCacheEntryA"), FALSE,
    TEXT("FindNextUrlCacheEntryExA"), FALSE,
    TEXT("FindNextUrlCacheEntryExW"), FALSE,
    TEXT("FindNextUrlCacheEntryW"), FALSE,
    TEXT("FreeUrlCacheSpaceA"), FALSE,
    TEXT("FreeUrlCacheSpaceW"), FALSE,
    TEXT("FtpCreateDirectoryA"), FALSE,
    TEXT("FtpCreateDirectoryW"), FALSE,
    TEXT("FtpDeleteFileA"), FALSE,
    TEXT("FtpDeleteFileW"), FALSE,
    TEXT("FtpFindFirstFileA"), FALSE,
    TEXT("FtpFindFirstFileW"), FALSE,
    TEXT("FtpGetCurrentDirectoryA"), FALSE,
    TEXT("FtpGetCurrentDirectoryW"), FALSE,
    TEXT("FtpGetFileA"), FALSE,
    TEXT("FtpGetFileW"), FALSE,
    TEXT("FtpOpenFileA"), FALSE,
    TEXT("FtpOpenFileW"), FALSE,
    TEXT("FtpPutFileA"), FALSE,
    TEXT("FtpPutFileW"), FALSE,
    TEXT("FtpRemoveDirectoryA"), FALSE,
    TEXT("FtpRemoveDirectoryW"), FALSE,
    TEXT("FtpRenameFileA"), FALSE,
    TEXT("FtpRenameFileW"), FALSE,
    TEXT("FtpSetCurrentDirectoryA"), FALSE,
    TEXT("FtpSetCurrentDirectoryW"), FALSE,
    TEXT("GetUrlCacheConfigInfoA"), FALSE,
    TEXT("GetUrlCacheConfigInfoW"), FALSE,
    TEXT("GetUrlCacheEntryInfoA"), FALSE,
    TEXT("GetUrlCacheEntryInfoExA"), FALSE,
    TEXT("GetUrlCacheEntryInfoExW"), FALSE,
    TEXT("GetUrlCacheEntryInfoW"), FALSE,
    TEXT("GetUrlCacheHeaderData"), FALSE,
    TEXT("GopherCreateLocatorA"), FALSE,
    TEXT("GopherCreateLocatorW"), FALSE,
    TEXT("GopherFindFirstFileA"), FALSE,
    TEXT("GopherFindFirstFileW"), FALSE,
    TEXT("GopherGetAttributeA"), FALSE,
    TEXT("GopherGetAttributeW"), FALSE,
    TEXT("GopherGetLocatorTypeA"), FALSE,
    TEXT("GopherGetLocatorTypeW"), FALSE,
    TEXT("GopherOpenFileA"), FALSE,
    TEXT("GopherOpenFileW"), FALSE,
    TEXT("HttpAddRequestHeadersA"), FALSE,
    TEXT("HttpAddRequestHeadersW"), FALSE,
    TEXT("HttpEndRequestA"), FALSE,
    TEXT("HttpEndRequestW"), FALSE,
    TEXT("HttpOpenRequestA"), FALSE,
    TEXT("HttpOpenRequestW"), FALSE,
    TEXT("HttpQueryInfoA"), FALSE,
    TEXT("HttpQueryInfoW"), FALSE,
    TEXT("HttpSendRequestA"), FALSE,
    TEXT("HttpSendRequestExA"), FALSE,
    TEXT("HttpSendRequestExW"), FALSE,
    TEXT("HttpSendRequestW"), FALSE,
    TEXT("IncrementUrlCacheHeaderData"), FALSE,
    TEXT("InternetAttemptConnect"), FALSE,
    TEXT("InternetAutodial"), FALSE,
    TEXT("InternetAutodialCallback"), FALSE,
    TEXT("InternetAutodialHangup"), FALSE,
    TEXT("InternetCanonicalizeUrlA"), FALSE,
    TEXT("InternetCanonicalizeUrlW"), FALSE,
    TEXT("InternetCheckConnectionA"), FALSE,
    TEXT("InternetCheckConnectionW"), FALSE,
    TEXT("InternetCloseHandle"), FALSE,
    TEXT("InternetCombineUrlA"), FALSE,
    TEXT("InternetCombineUrlW"), FALSE,
    TEXT("InternetConfirmZoneCrossing"), FALSE,
    TEXT("InternetConnectA"), FALSE,
    TEXT("InternetConnectW"), FALSE,
    TEXT("InternetCrackUrlA"), FALSE,
    TEXT("InternetCrackUrlW"), FALSE,
    TEXT("InternetCreateUrlA"), FALSE,
    TEXT("InternetCreateUrlW"), FALSE,
    TEXT("InternetDebugGetLocalTime"), FALSE,
    TEXT("InternetDial"), FALSE,
    TEXT("InternetErrorDlg"), FALSE,
    TEXT("InternetFindNextFileA"), FALSE,
    TEXT("InternetFindNextFileW"), FALSE,
    TEXT("InternetGetCertByURL"), FALSE,
    TEXT("InternetGetConnectedState"), FALSE,
    TEXT("InternetGetCookieA"), FALSE,
    TEXT("InternetGetCookieW"), FALSE,
    TEXT("InternetGetLastResponseInfoA"), FALSE,
    TEXT("InternetGetLastResponseInfoW"), FALSE,
    TEXT("InternetGoOnline"), FALSE,
    TEXT("InternetHangUp"), FALSE,
    TEXT("InternetInitializeAutoProxyDll"), FALSE,
    TEXT("InternetLockRequestFile"), FALSE,
    TEXT("InternetOpenA"), FALSE,
    TEXT("InternetOpenServerPushParse"), FALSE,
    TEXT("InternetOpenUrlA"), FALSE,
    TEXT("InternetOpenUrlW"), FALSE,
    TEXT("InternetOpenW"), FALSE,
    TEXT("InternetQueryDataAvailable"), FALSE,
    TEXT("InternetQueryOptionA"), FALSE,
    TEXT("InternetQueryOptionW"), FALSE,
    TEXT("InternetReadFile"), FALSE,
    TEXT("InternetReadFileExA"), FALSE,
    TEXT("InternetReadFileExW"), FALSE,
    TEXT("InternetServerPushParse"), FALSE,
    TEXT("InternetSetCookieA"), FALSE,
    TEXT("InternetSetCookieW"), FALSE,
    TEXT("InternetSetDialState"), FALSE,
    TEXT("InternetSetFilePointer"), FALSE,
    TEXT("InternetSetOptionA"), FALSE,
    TEXT("InternetSetOptionExA"), FALSE,
    TEXT("InternetSetOptionExW"), FALSE,
    TEXT("InternetSetOptionW"), FALSE,
    TEXT("InternetSetStatusCallback"), FALSE,
    TEXT("InternetShowSecurityInfoByURL"), FALSE,
    TEXT("InternetTimeFromSystemTime"), FALSE,
    TEXT("InternetTimeToSystemTime"), FALSE,
    TEXT("InternetUnlockRequestFile"), FALSE,
    TEXT("InternetWriteFile"), FALSE,
    TEXT("InternetWriteFileExA"), FALSE,
    TEXT("InternetWriteFileExW"), FALSE,
    TEXT("IsHostInProxyBypassList"), FALSE,
    TEXT("LoadUrlCacheContent"), FALSE,
    TEXT("ParseX509EncodedCertificateForListBoxEntry"), FALSE,
    TEXT("ReadUrlCacheEntryStream"), FALSE,
    TEXT("RetrieveUrlCacheEntryFileA"), FALSE,
    TEXT("RetrieveUrlCacheEntryFileW"), FALSE,
    TEXT("RetrieveUrlCacheEntryStreamA"), FALSE,
    TEXT("RetrieveUrlCacheEntryStreamW"), FALSE,
    TEXT("RunOnceUrlCache"), FALSE,
    TEXT("SetUrlCacheConfigInfoA"), FALSE,
    TEXT("SetUrlCacheConfigInfoW"), FALSE,
    TEXT("SetUrlCacheEntryGroup"), FALSE,
    TEXT("SetUrlCacheEntryInfoA"), FALSE,
    TEXT("SetUrlCacheEntryInfoW"), FALSE,
    TEXT("SetUrlCacheHeaderData"), FALSE,
    TEXT("ShowCertificate"), FALSE,
    TEXT("ShowClientAuthCerts"), FALSE,
    TEXT("ShowSecurityInfo"), FALSE,
    TEXT("ShowX509EncodedCertificate"), FALSE,
    TEXT("UnlockUrlCacheEntryFile"), FALSE,
    TEXT("UnlockUrlCacheEntryStream"), FALSE,
    TEXT("UpdateUrlCacheContentPath"), FALSE,
    NULL, FALSE  // Data structure must end with a NULL function name.
};

FUNCLIST aflWinSock[] =
{
    TEXT("EnumProtocolsW"), FALSE,
    TEXT("WSACleanup"), FALSE,
    TEXT("WSAIoctl"), FALSE,
    TEXT("WSAStartup"), FALSE,
    TEXT("WSAGetLastError"), FALSE,
    TEXT("WSASetLastError"), FALSE,
    TEXT("WsControl"), FALSE,
    TEXT("__WSAFDIsSet"), FALSE,
    TEXT("accept"), FALSE,
    TEXT("bind"), FALSE,
    TEXT("closesocket"), FALSE,
    TEXT("connect"), FALSE,
    TEXT("gethostbyaddr"), FALSE,
    TEXT("gethostbyname"), FALSE,
    TEXT("gethostname"), FALSE,
    TEXT("getpeername"), FALSE,
    TEXT("getsockname"), FALSE,
    TEXT("getsockopt"), FALSE,
    TEXT("htonl"), FALSE,
    TEXT("htons"), FALSE,
    TEXT("inet_addr"), FALSE,
    TEXT("inet_ntoa"), FALSE,
    TEXT("ioctlsocket"), FALSE,
    TEXT("listen"), FALSE,
    TEXT("ntohl"), FALSE,
    TEXT("ntohs"), FALSE,
    TEXT("recv"), FALSE,
    TEXT("recvfrom"), FALSE,
    TEXT("select"), FALSE,
    TEXT("send"), FALSE,
    TEXT("sendto"), FALSE,
    TEXT("sethostname"), FALSE,
    TEXT("setsockopt"), FALSE,
    TEXT("shutdown"), FALSE,
    TEXT("socket"), FALSE,
    NULL, FALSE  // Data structure must end with a NULL function name.
};


FUNCLIST aflCeShell[] =
{
    TEXT("?SHRemoveFontResource@@YAHPAG@Z"), FALSE,
    TEXT("?_SHRemoveFontResource@@YAHPAG@Z"), FALSE,
    TEXT("DoDragDrop"), FALSE,
    TEXT("EDList_FindExplorer"), FALSE,
    TEXT("EDList_Initialize"), FALSE,
    TEXT("EDList_NextChange"), FALSE,
    TEXT("EDList_PostMessage"), FALSE,
    TEXT("EDList_RegisterED"), FALSE,
    TEXT("EDList_Uninitialize"), FALSE,
    TEXT("GetOpenFileName"), FALSE,
    TEXT("GetSaveFileName"), FALSE,
    TEXT("Host_CenterWindow"), FALSE,
    TEXT("Host_CheckStack"), FALSE,
    TEXT("Host_Exec"), FALSE,
    TEXT("Host_FindBigDaddy"), FALSE,
    TEXT("Host_MessageBox"), FALSE,
    TEXT("Host_OpenPositionDB"), FALSE,
    TEXT("Host_ShowFileError"), FALSE,
    TEXT("ILConcatenate"), FALSE,
    TEXT("ILCopy"), FALSE,
    TEXT("ILFree"), FALSE,
    TEXT("ILGetFileSystemPidlData"), FALSE,
    TEXT("ILIsFileSystemPidl"), FALSE,
    TEXT("ILIsGUIDPidl"), FALSE,
    TEXT("ILIsNameSpacePidl"), FALSE,
    TEXT("ILIsPidl"), FALSE,
    TEXT("ILIsRemovableDevice"), FALSE,
    TEXT("ILRealPathFromPidl"), FALSE,
    TEXT("PathCompactPath"), FALSE,
    TEXT("PathCompactSlashes"), FALSE,
    TEXT("PathFileExists"), FALSE,
    TEXT("PathFindExtension"), FALSE,
    TEXT("PathFindFileName"), FALSE,
    TEXT("PathGetArgs"), FALSE,
    TEXT("PathGetAssociation"), FALSE,
    TEXT("PathIsDirectory"), FALSE,
    TEXT("PathIsExe"), FALSE,
    TEXT("PathIsExtension"), FALSE,
    TEXT("PathIsGUID"), FALSE,
    TEXT("PathIsLink"), FALSE,
    TEXT("PathIsValidFileName"), FALSE,
    TEXT("PathIsValidPath"), FALSE,
    TEXT("PathMakePretty"), FALSE,
    TEXT("PathMakeUniqueName"), FALSE,
    TEXT("PathMatchSpec"), FALSE,
    TEXT("PathRemoveArgs"), FALSE,
    TEXT("PathRemoveBlanks"), FALSE,
    TEXT("PathRemoveExtension"), FALSE,
    TEXT("PathRemoveFileSpec"), FALSE,
    TEXT("PathRemoveQuotes"), FALSE,
    TEXT("PathRemoveQuotesAndArgs"), FALSE,
    TEXT("PathRemoveTrailingSlashes"), FALSE,
    TEXT("PathStripPath"), FALSE,
    TEXT("RegisterDragDrop"), FALSE,
    TEXT("RevokeDragDrop"), FALSE,
    TEXT("SHAddToRecentDocs"), FALSE,
    TEXT("SHCreateShortcut"), FALSE,
    TEXT("SHFileOperationW"), FALSE,
    TEXT("SHFlushCache"), FALSE,
    TEXT("SHGetDesktopFolder"), FALSE,
    TEXT("SHGetFileInfo"), FALSE,
    TEXT("SHGetMalloc"), FALSE,
    TEXT("SHGetPathFromIDList"), FALSE,
    TEXT("SHGetShortcutTarget"), FALSE,
    TEXT("SHGetSpecialFolderLocation"), FALSE,
    TEXT("SHLoadDIBitmap"), FALSE,
    TEXT("SHLoadDIBitmapBrush"), FALSE,
    TEXT("SHRegQuerySZ"), FALSE,
    TEXT("SHRegQuerySZEx"), FALSE,
    TEXT("SHSetSystemEUDCFont"), FALSE,
    NULL, FALSE  // Data structure must end with a NULL function name.
};


FUNCLIST aflAddrStor[] =
{
    TEXT("AddAddressCard"), FALSE,
    TEXT("CloseAddressBook"), FALSE,
    TEXT("ConstructStoreFileAs"), FALSE,
    TEXT("CreateAddressBook"), FALSE,
    TEXT("DeleteAddressCard"), FALSE,
    TEXT("FindFirstEntry"), FALSE,
    TEXT("FreeAddressCard"), FALSE,
    TEXT("GetAddressCardIndex"), FALSE,
    TEXT("GetAddressCardOid"), FALSE,
    TEXT("GetAddressCardProperties"), FALSE,
    TEXT("GetAddrstorInst"), FALSE,
    TEXT("GetColumnProperties"), FALSE,
    TEXT("GetDefaultFields"), FALSE,
    TEXT("GetFieldFromProperty"), FALSE,
    TEXT("GetMask"), FALSE,
    TEXT("GetMatchingEntry"), FALSE,
    TEXT("GetMatchingEntryEx"), FALSE,
    TEXT("GetNumberOfAddressCards"), FALSE,
    TEXT("GetPropertyDataStruct"), FALSE,
    TEXT("GetSortOrder"), FALSE,
    TEXT("GetSortOrderFromProperty"), FALSE,
    TEXT("InitializeExtended"), FALSE,
    TEXT("ModifyAddressCard"), FALSE,
    TEXT("OpenAddressBook"), FALSE,
    TEXT("OpenAddressCard"), FALSE,
    TEXT("PimCategListBlob"), FALSE,
    TEXT("PimCategParseBlob"), FALSE,
    TEXT("RecountCards"), FALSE,
    TEXT("SetColumnProperties"), FALSE,
    TEXT("SetMask"), FALSE,
    TEXT("SetSortOrder"), FALSE,
    NULL, FALSE  // Data structure must end with a NULL function name.
};

FUNCLIST aflHtmlVIew[] =
{
    TEXT("InitHTMLControl"), FALSE,
    NULL, FALSE  // Data structure must end with a NULL function name.
};

FUNCLIST aflMsgStor[] =
{
    TEXT("?MailCheckFolder@@YAHKK@Z"), FALSE,
    TEXT("?MailFindObjects@@YAHPAU_CEGUID@@KPAKPAPAKPAH3I@Z"), FALSE,
    TEXT("?MailGetFolderCounts@@YAHKPAK000@Z"), FALSE,
    TEXT("?MailGetHeadRecordOid@@YAHPAXPAK@Z"), FALSE,
    TEXT("?MailSetMessageId@@YAHPAXK@Z"), FALSE,
    TEXT("MailClose"), FALSE,
    TEXT("MailDelete"), FALSE,
    TEXT("MailDeleteAttachment"), FALSE,
    TEXT("MailError"), FALSE,
    TEXT("MailErrorMsg"), FALSE,
    TEXT("MailFirst"), FALSE,
    TEXT("MailFirstEx"), FALSE,
    TEXT("MailFree"), FALSE,
    TEXT("MailFreeFolderInfo"), FALSE,
    TEXT("MailFreeIterator"), FALSE,
    TEXT("MailFreeNotification"), FALSE,
    TEXT("MailGet"), FALSE,
    TEXT("MailGetAttachment"), FALSE,
    TEXT("MailGetEx"), FALSE,
    TEXT("MailGetField"), FALSE,
    TEXT("MailGetFirstSubFolder"), FALSE,
    TEXT("MailGetFolderId"), FALSE,
    TEXT("MailGetFolderIdEx"), FALSE,
    TEXT("MailGetFolderIdFromSvcId"), FALSE,
    TEXT("MailGetFolderInfo"), FALSE,
    TEXT("MailGetFolderName"), FALSE,
    TEXT("MailGetFolderNameEx"), FALSE,
    TEXT("MailGetNextSubFolder"), FALSE,
    TEXT("MailGetParent"), FALSE,
    TEXT("MailGetSort"), FALSE,
    TEXT("MailGetSpecialFolderId"), FALSE,
    TEXT("MailGetSvcId"), FALSE,
    TEXT("MailGetSvcIdEx"), FALSE,
    TEXT("MailHeaderLen"), FALSE,
    TEXT("MailLocalAttachmentLen"), FALSE,
    TEXT("MailNext"), FALSE,
    TEXT("MailNextEx"), FALSE,
    TEXT("MailOpen"), FALSE,
    TEXT("MailOpenNotify"), FALSE,
    TEXT("MailOpenNotifyEx"), FALSE,
    TEXT("MailPrCardHasOurAttachments"), FALSE,
    TEXT("MailPrCreateNewAttDirectoryInRAM"), FALSE,
    TEXT("MailPrEnumInstalledCards"), FALSE,
    TEXT("MailPrEnumStorageCards"), FALSE,
    TEXT("MailPrGetDBInfo"), FALSE,
    TEXT("MailPrGetStoreSize"), FALSE,
    TEXT("MailPrGetStoresOnCard"), FALSE,
    TEXT("MailPrLocateCardWithOurAttachments"), FALSE,
    TEXT("MailPrMoveAttachments"), FALSE,
    TEXT("MailPrOpenDatabase"), FALSE,
    TEXT("MailPut"), FALSE,
    TEXT("MailPutAttachment"), FALSE,
    TEXT("MailPutEx"), FALSE,
    TEXT("MailPutFolder"), FALSE,
    TEXT("MailPutFolderEx"), FALSE,
    TEXT("MailPutFolderInfo"), FALSE,
    TEXT("MailReadNonIPMProperties"), FALSE,
    TEXT("MailRegCloseKey"), FALSE,
    TEXT("MailRegEnumKeyExW"), FALSE,
    TEXT("MailRegOpenKeyExW"), FALSE,
    TEXT("MailRequestAttachment"), FALSE,
    TEXT("MailSetAttachmentOptions"), FALSE,
    TEXT("MailSetField"), FALSE,
    TEXT("MailSetSort"), FALSE,
    TEXT("MailUpdate"), FALSE,
    TEXT("MailUpdateEx"), FALSE,
    TEXT("MailWriteNonIPMProperties"), FALSE,
    NULL, FALSE  // Data structure must end with a NULL function name.
};

FUNCLIST aflRichInk[] =
{
    TEXT("ConvertInkFile"), FALSE,
    TEXT("InitRichInkDLL"), FALSE,
    TEXT("StringInFile"), FALSE,
    TEXT("StringInMemFile"), FALSE,
    NULL, FALSE  // Data structure must end with a NULL function name.
};


FUNCLIST aflAygShell[] =
{
    TEXT("SHCloseApps"), FALSE,
    TEXT("SHFileNotifyAdd"), FALSE,
    TEXT("SHFileNotifyFree"), FALSE,
    TEXT("SHFileNotifyRemove"), FALSE,
    TEXT("SHGetAppKeyAssoc"), FALSE,
    TEXT("SHImListPopup"), FALSE,
    TEXT("SHInitExtraControls"), FALSE,
    TEXT("SHSetAppKeyWndAssoc"), FALSE,
    TEXT("SHSipInfo"), FALSE,
    NULL, FALSE  // Data structure must end with a NULL function name.
};


#define MAGIC_ALL ((FUNCLIST *)0xffffffff)

LIBLIST dlls[] =
{
    TEXT("* All Libraries *"), MAGIC_ALL, 0, 0,
    TEXT("AYGSHELL.DLL"), aflAygShell, (sizeof(aflAygShell)/sizeof(FUNCLIST))-1, 0,
    TEXT("ADDRSTOR.DLL"), aflAddrStor, (sizeof(aflAddrStor)/sizeof(FUNCLIST))-1, 0,
    TEXT("CESHELL.DLL"), aflCeShell, (sizeof(aflCeShell)/sizeof(FUNCLIST))-1, 0,
    TEXT("COMMCTRL.DLL"), aflCommCtrl, (sizeof(aflCommCtrl)/sizeof(FUNCLIST))-1, 0,
    TEXT("COREDLL.DLL"), aflCoreDll, (sizeof(aflCoreDll)/sizeof(FUNCLIST))-1, 0,
    TEXT("HTMLVIEW.DLL"), aflHtmlVIew, (sizeof(aflHtmlVIew)/sizeof(FUNCLIST))-1, 0,
    TEXT("SECUR32.DLL"), aflSecur32, (sizeof(aflSecur32)/sizeof(FUNCLIST))-1, 0,
    TEXT("MSGSTORE.DLL"), aflMsgStor, (sizeof(aflMsgStor)/sizeof(FUNCLIST))-1, 0,
    TEXT("RICHINK.DLL"), aflRichInk, (sizeof(aflRichInk)/sizeof(FUNCLIST))-1, 0,
#ifdef _WIN32_WCE_EMULATION
    TEXT("COMMDLGM.DLL"), aflCommDlg, (sizeof(aflCommDlg)/sizeof(FUNCLIST))-1, 0,
    TEXT("OLE32M.DLL"), aflOle32, (sizeof(aflOle32)/sizeof(FUNCLIST))-1, 0,
    TEXT("OLEAUTM.DLL"), aflAut32, (sizeof(aflAut32)/sizeof(FUNCLIST))-1, 0,
    TEXT("TOOLHELPM.DLL"), aflToolHelp, (sizeof(aflToolHelp)/sizeof(FUNCLIST))-1, 0,
    TEXT("WININETM.DLL"), aflWinInet, (sizeof(aflWinInet)/sizeof(FUNCLIST))-1, 0,
    TEXT("WINSOCKM.DLL"), aflWinSock, (sizeof(aflWinSock)/sizeof(FUNCLIST))-1, 0,
#else
    TEXT("commdlg.DLL"), aflCommDlg, (sizeof(aflCommDlg)/sizeof(FUNCLIST))-1, 0,
    TEXT("ole32.DLL"), aflOle32, (sizeof(aflOle32)/sizeof(FUNCLIST))-1, 0,
    TEXT("oleaut32.DLL"), aflAut32, (sizeof(aflAut32)/sizeof(FUNCLIST))-1, 0,
    TEXT("toolhelp.DLL"), aflToolHelp, (sizeof(aflToolHelp)/sizeof(FUNCLIST))-1, 0,
    TEXT("wininet.DLL"), aflWinInet, (sizeof(aflWinInet)/sizeof(FUNCLIST))-1, 0,
    TEXT("winsock.DLL"), aflWinSock, (sizeof(aflWinSock)/sizeof(FUNCLIST))-1, 0,
#endif
    NULL, NULL, 0, FALSE // Data structure must end with a NULL library name.
};

#endif // !defined(AFX_CEFUN_H__BAE08A89_0375_11D3_B4B2_00008612908A__INCLUDED_)



